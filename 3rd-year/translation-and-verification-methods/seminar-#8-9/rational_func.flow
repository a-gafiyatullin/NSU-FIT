import runtime;
import string;
import lingo/pegcode/driver;
import math/math;

AlgExp ::= AlgVar, AlgSum, AlgMult, AlgInt, AlgSub, AlgDiv, AlgUnarSub;
AlgVar(var: string);
AlgSum(lhs: AlgExp, rhs: AlgExp);
AlgMult(lhs: AlgExp, rhs: AlgExp);
AlgSub(lhs: AlgExp, rhs: AlgExp);
AlgDiv(lhs: AlgExp, rhs: AlgExp);
AlgUnarSub(val: AlgExp);
AlgInt(val: int);

s2alg(s: string) -> AlgExp {
    gram = "#include alg_exp.gram";
    parsic(compilePegGrammar(gram), s, defaultPegActions)
}

RatNum(num: int, den: int);

ratNumNormalizeSign(r: RatNum) -> RatNum {
    if(r.num * r.den > 0) {
        if(r.num > 0) r
        else RatNum(-r.num, -r.den)
    } else {
        if(r.den < 0) RatNum(-r.num, -r.den)
        else r
    }
}

sumRat(left: RatNum, right: RatNum) -> RatNum {
    newden = lcm(left.den, right.den);
    newleft = left.num * newden / left.den;
    newright = right.num * newden / right.den;
    newnum = newleft + newright;
    ratNumNormalizeSign(RatNum(newnum / gcd(newnum, newden), newden / gcd(newnum, newden)))
}

multRat(left: RatNum, right: RatNum) -> RatNum {
    newnum = left.num * right.num;
    newden = left.den * right.den;
    ratNumNormalizeSign(RatNum(newnum / gcd(newnum, newden), newden / gcd(newnum, newden)))
}

divRat(left: RatNum, right: RatNum) -> RatNum {
    newnum = left.num * right.den;
    newden = left.den * right.num;
    ratNumNormalizeSign(RatNum(newnum / gcd(newnum, newden), newden / gcd(newnum, newden)))
}

ratNum2str(e: RatNum) -> string {
    if(e.num == 1) ""
    else if(e.den == 1) i2s(e.num)
    else "(" + i2s(e.num) + "/" + i2s(e.den) + ")"
}

gcdRatNum(l: RatNum, r: RatNum) -> RatNum {
    RatNum(gcd(l.num, r.num), gcd(l.den, r.den))
}

RatFunc(num: PolySum, den: PolySum);
PolySum(sum: Tree<PolyProd, RatNum>);
PolyProd(prod: Tree<string, int>);

multPolySum(l: PolySum, r: PolySum) -> PolySum {
    PolySum(foldTree(l.sum, makeTree(), \ curr_prod, coef, acc_prod -> {
        sumPolySum(PolySum(acc_prod), PolySum(foldTree(r.sum, makeTree(), \ curr_prod1, coef1, acc_prod1 -> {
            setTree(acc_prod1, PolyProd(mergeTreeCustom(curr_prod.prod, curr_prod1.prod, \ var, deg, deg1 -> {
                deg + deg1
            })), multRat(coef, coef1))
        }))).sum
    }))
}

sumPolySum(l: PolySum, r: PolySum) -> PolySum {
    PolySum(mergeTreeCustom(l.sum, r.sum, \ curr_prod, coef, coef1 -> { sumRat(coef, coef1) }))
}

divPolySumRatNum(l: PolySum, r: RatNum) -> PolySum {
    PolySum(foldTree(l.sum, makeTree(), \ curr_prod, coef, acc_prod -> {
        setTree(acc_prod, curr_prod, divRat(coef, r))
    }))
}

multRatFunc(l: RatFunc, r: RatFunc) -> RatFunc {
    RatFunc(multPolySum(l.num, r.num), multPolySum(l.den, r.den))
}

sumRatFunc(l: RatFunc, r: RatFunc) -> RatFunc {
    den = multPolySum(l.den, r.den);
    num = sumPolySum(multPolySum(l.num, r.den), multPolySum(l.den, r.num));
    RatFunc(num, den)
}

unarSubRatFunc(val: RatFunc) -> RatFunc {
    RatFunc(PolySum(foldTree(val.num.sum, makeTree(), \ curr_prod, coef, acc_prod -> {
        setTree(acc_prod, curr_prod, RatNum(-coef.num, coef.den))
    })), val.den)
}

alg2rat(e: AlgExp) -> RatFunc {
    switch(e: AlgExp) {
        AlgSum(l, r): sumRatFunc(alg2rat(l), alg2rat(r))
        AlgMult(l, r): multRatFunc(alg2rat(l), alg2rat(r))
        AlgSub(l, r): sumRatFunc(alg2rat(l), alg2rat(AlgUnarSub(r)))
        AlgDiv(l, r): {
            nr = alg2rat(r);
            multRatFunc(alg2rat(l), RatFunc(nr.den, nr.num))
        }
        AlgUnarSub(val): unarSubRatFunc(alg2rat(val))
        AlgInt(val): RatFunc(PolySum(makeTree1(PolyProd(makeTree()), RatNum(val, 1))), PolySum(makeTree1(PolyProd(makeTree()), RatNum(1, 1))))
        AlgVar(val): RatFunc(PolySum(makeTree1(PolyProd(makeTree1(val, 1)), RatNum(1, 1))), PolySum(makeTree1(PolyProd(makeTree()), RatNum(1, 1))))
    }
}

poly2str(e: PolySum) -> string {
    str = foldTree(e.sum, "", \ curr_prod, coef, acc_prod -> {
        acc_prod + "+" + ratNum2str(coef) + foldTree(curr_prod.prod, "", \ curr_var, deg, acc_var -> {
            if(deg == 0) acc_var
            else if(deg == 1) acc_var + curr_var
            else acc_var + curr_var + "^(" + i2s(deg) + ")"
        })
    });
    strSubRange(str, 1, strlen(str))
}

rat2str(e: RatFunc) -> string {
    num = poly2str(e.num);
    den = poly2str(e.den);
    if(strlen(den) == 0) {
        "(" + num + ")"
    } else {
        "(" + num + ")" + "/" + "(" + den + ")"
    }
}

simplifyrat(e: RatFunc) -> RatFunc {
    init_prod_num = switch(popmax(e.num.sum)) {
        EmptyPopResult(): Pair(PolyProd(makeTree()), RatNum(0, 0))
        PopResult(k, v, rest): Pair(k, v)
    }
    gcd_prod_num = foldTree(e.num.sum, init_prod_num.first.prod, \ curr_prod, coef, acc_prod -> {
        foldTree(curr_prod.prod, makeTree(), \ curr_var, deg, acc_var -> {
            switch(lookupTree(acc_prod, curr_var)) {
                None(): acc_var
                Some(v): setTree(acc_var, curr_var, min(deg, v))
            }
        })
    });
    gcd_rat_num = foldTree(e.num.sum, init_prod_num.second, \ prod, curr_coef, acc_coef -> {
        gcdRatNum(acc_coef, curr_coef)
    });
    init_prod_den = switch(popmax(e.den.sum)) {
        EmptyPopResult(): Pair(PolyProd(makeTree()), RatNum(0, 0))
        PopResult(k, v, rest): Pair(k, v)
    }
    gcd_prod_den = foldTree(e.den.sum, init_prod_den.first.prod, \ curr_prod, coef, acc_prod -> {
        foldTree(curr_prod.prod, makeTree(), \ curr_var, deg, acc_var -> {
            switch(lookupTree(acc_prod, curr_var)) {
                None(): acc_var
                Some(v): setTree(acc_var, curr_var, min(deg, v))
            }
        })
    });
    gcd_rat_den = foldTree(e.den.sum, init_prod_num.second, \ prod, curr_coef, acc_coef -> {
        gcdRatNum(acc_coef, curr_coef)
    });
    gcd_rat = Pair(foldTree(gcd_prod_num, makeTree(), \ var, deg, prod -> {
        switch(lookupTree(gcd_prod_den, var)) {
            None(): prod
            Some(v): setTree(prod, var, min(deg, v))
        }
    }), gcdRatNum(gcd_rat_num, gcd_rat_den));

    new_den = foldTree(e.den.sum, makeTree(), \ curr_prod, coef, acc_prod -> {
        setTree(acc_prod, PolyProd(foldTree(curr_prod.prod, makeTree(), \ curr_var, deg, acc_var -> {
            switch(lookupTree(gcd_rat.first, curr_var)) {
                None(): setTree(acc_var, curr_var, deg)
                Some(v): setTree(acc_var, curr_var, deg - v)
            }
        })), divRat(coef, gcd_rat.second))
    });
    new_num = foldTree(e.num.sum, makeTree(), \ curr_prod, coef, acc_prod -> {
        setTree(acc_prod, PolyProd(foldTree(curr_prod.prod, makeTree(), \ curr_var, deg, acc_var -> {
            switch(lookupTree(gcd_rat.first, curr_var)) {
                None(): setTree(acc_var, curr_var, deg)
                Some(v): setTree(acc_var, curr_var, deg - v)
            }
        })), divRat(coef, gcd_rat.second))
    });
    new_den_without_zeros = foldTree(new_den, makeTree(), \ curr_prod, coef, acc_prod -> {
        if(coef.num == 0) acc_prod else setTree(acc_prod, curr_prod, coef)
    });
    new_num_without_zeros = foldTree(new_num, makeTree(), \ curr_prod, coef, acc_prod -> {
        if(coef.num == 0) acc_prod else setTree(acc_prod, curr_prod, coef)
    });
    if(divPolySumRatNum(PolySum(new_num_without_zeros), gcd_rat_num) == divPolySumRatNum(PolySum(new_den_without_zeros), gcd_rat_den)) {
        RatFunc(PolySum(makeTree1(PolyProd(makeTree()), divRat(gcd_rat_num, gcd_rat_den))), PolySum(makeTree1(PolyProd(makeTree()), RatNum(1, 1))))
    } else {
        RatFunc(PolySum(new_num_without_zeros), PolySum(new_den_without_zeros))
    }
}

main() {
    str = "((((4*a)*a)-9)*((1/((2*a)-3))-(1/((2*a)+3))))";
    //str = "(((((9*x)*x)-4)/((3*x)+2))-(3*x))";
    //str = "(((x-5)*(x-4))/((x-4)*((2*x)-10)))";
    alg = s2alg(str);
    rat = simplifyrat(alg2rat(alg));
    println(rat2str(rat))
}
