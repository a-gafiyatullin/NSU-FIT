:-dynamic db_yes/1, db_no/1.

/* возможные проблемы */
complaint(1,  'нет изображения').
complaint(2,  'разрывы изображения').
complaint(3,  'низкое разрешение изображения').
complaint(4,  'Linux').
complaint(5,  'процессор без видеоядра').
complaint(6,  'дискретная видеокарта').

complaint(7,  'ОС не обнаружила носитель').
complaint(8,  'жесткий диск').
complaint(9,  'flash-карта').
complaint(10, 'не отформатирован носитель').

complaint(11, 'Java-программа').
complaint(12, 'Python-программа').
complaint(13, 'не модифицированы переменные окружения').
complaint(14, 'не определяется видеокарта').

complaint(15, 'самостоятельная сборка компьютера').
complaint(16, '4 слота оперативной памяти').
complaint(17, 'не выставлены настройки оперативной памяти в BIOS').

/* правила */
solution(1, 1,   'тиринг экрана. Проверьте настройки синхронизации монитора.', [2]).
solution(2, 1,   'не может прогрузиться проприетарный драйвер видеокарты. Добавьте свободный драйвер в черный список.', [3, 4, 6]).
solution(3, 1,   'нет видеосигнала. Проверьте видеовыход вашего ПК на наличие подключенной к нему видеокарты.', [1, 5, 6]).

solution(4, 2,  'отошел SATA-шлейф. Проверьте подключение жесткого диска к материнской плате.', [7, 8]).
solution(5, 2,  'USB порт не подключен к материнской плате. Попробуйте другие порты или проверьте подключение данного к материнской плате.', [7, 9]).
solution(6, 2,  'повреждена ФС. Отформатируйте носитель в ФС FAT32.', [10]).

solution(7, 3,  'не установлена виртуальная Java-машина или переменные окружения для нее.', [11, 13]).
solution(8, 3,  'не установлен интерпретатор Python или переменные окружения для него.', [12, 13]).
solution(9, 3,  'не установлен драйвер видеокарты.', [14]).

solution(10, 4, 'оперативная память работает в одноканальном режиме.', [15, 16]).
solution(11, 4, 'не выставлена максимально возможная частота оперативной памяти в BIOS.', [15, 17]).

/* печать списков */
print_list([]).
print_list([Head | Tail]) :- write('    - '), complaint(Head, X), writeln(X), print_list(Tail).

/* перебор решений проблем из класса */
problem_solution_class(Y) :- solution(X, Y, Z, _), write(X), write(') '), writeln(Z), fail.

/* ограничитель перебора */
problem_type(Y) :-  writeln('Укажите c чем у Вас проблемы(номер):'),
                    writeln('1) монитор'),
                    writeln('2) накопитель'),
                    writeln('3) программа'),
                    writeln('4) быстродействие'),
                    read(Y).

/* поиск решения проблемы */
problem(Z, X, Y) :- solution(Z, Y, X, Complaint),
                    check_complaint(Complaint).
problem(_, _, _) :- writeln('Информации о Вашей проблеме нет.'), fail.

check_complaint([N | Complaint]) :- complaint(N, A),
                                    yes(A),
                                    check_complaint(Complaint).
check_complaint([]).

yes(X) :-   db_yes(X), !.
yes(X) :-   not(no(X)), !, check_if(X).
no(X) :-    db_no(X), !.

check_if(X) :-  write("У Вас "), write(X), writeln("?(y/n)"),
                read(Reply),
                remember(Reply, X).

remember(y, X) :-  asserta(db_yes(X)).
remember(n, X) :- asserta(db_no(X)), fail.

/*---------------------------------------------------------------------------------------------------ЦЕЛИ-----------------------------------------------------------------------------------------*/
/* решение проблемы */
find_solution :-    retractall(db_yes(_)), retractall(db_no(_)),
                    problem_type(Y), problem(Z, X, Y), write("Возможно, у Вас "),
                    writeln(X), nl,
                    writeln('Такое решение получено, потому что у Вас:'),
                    solution(Z, _, _, Complaint), print_list(Complaint).

/* признаки проблемы */
problem_solution_properties :-  problem_type(Y), writeln("Для проблем из этого класса существуют следующие решения:"), nl,
                                not(problem_solution_class(Y)), nl,
                                writeln("Укажите номер решения проблемы, чтобы узнать, что к ней могло привести:"),
                                read(X),
                                writeln("Следующие признаки указывают, что данное решение может решить Вашу проблему:"),
                                solution(X, _, _, Complaint), print_list(Complaint).