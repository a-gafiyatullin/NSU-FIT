// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snakes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "snakes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace snakes {

namespace {

const ::google::protobuf::Descriptor* GamePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameState_Coord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameState_Coord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameState_Snake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameState_Snake_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameState_Snake_SnakeState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_reflection_ = NULL;
struct GameMessageOneofInstance {
  const ::snakes::GameMessage_PingMsg* ping_;
  const ::snakes::GameMessage_SteerMsg* steer_;
  const ::snakes::GameMessage_AckMsg* ack_;
  const ::snakes::GameMessage_StateMsg* state_;
  const ::snakes::GameMessage_AnnouncementMsg* announcement_;
  const ::snakes::GameMessage_JoinMsg* join_;
  const ::snakes::GameMessage_ErrorMsg* error_;
  const ::snakes::GameMessage_RoleChangeMsg* role_change_;
}* GameMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_PingMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_PingMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_SteerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_SteerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_AckMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_AckMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_StateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_StateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_AnnouncementMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_AnnouncementMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_JoinMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_JoinMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_ErrorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_ErrorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_RoleChangeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_RoleChangeMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeRole_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Direction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_snakes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_snakes_2eproto() {
  protobuf_AddDesc_snakes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "snakes.proto");
  GOOGLE_CHECK(file != NULL);
  GamePlayer_descriptor_ = file->message_type(0);
  static const int GamePlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, score_),
  };
  GamePlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GamePlayer_descriptor_,
      GamePlayer::default_instance_,
      GamePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, _has_bits_[0]),
      -1,
      -1,
      sizeof(GamePlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, _internal_metadata_),
      -1);
  GameConfig_descriptor_ = file->message_type(1);
  static const int GameConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, food_static_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, food_per_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, state_delay_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, dead_food_prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, ping_delay_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, node_timeout_ms_),
  };
  GameConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameConfig_descriptor_,
      GameConfig::default_instance_,
      GameConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, _internal_metadata_),
      -1);
  GamePlayers_descriptor_ = file->message_type(2);
  static const int GamePlayers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayers, players_),
  };
  GamePlayers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GamePlayers_descriptor_,
      GamePlayers::default_instance_,
      GamePlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayers, _has_bits_[0]),
      -1,
      -1,
      sizeof(GamePlayers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayers, _internal_metadata_),
      -1);
  GameState_descriptor_ = file->message_type(3);
  static const int GameState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, state_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, snakes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, foods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, config_),
  };
  GameState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameState_descriptor_,
      GameState::default_instance_,
      GameState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _internal_metadata_),
      -1);
  GameState_Coord_descriptor_ = GameState_descriptor_->nested_type(0);
  static const int GameState_Coord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Coord, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Coord, y_),
  };
  GameState_Coord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameState_Coord_descriptor_,
      GameState_Coord::default_instance_,
      GameState_Coord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Coord, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameState_Coord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Coord, _internal_metadata_),
      -1);
  GameState_Snake_descriptor_ = GameState_descriptor_->nested_type(1);
  static const int GameState_Snake_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Snake, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Snake, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Snake, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Snake, head_direction_),
  };
  GameState_Snake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameState_Snake_descriptor_,
      GameState_Snake::default_instance_,
      GameState_Snake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Snake, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameState_Snake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState_Snake, _internal_metadata_),
      -1);
  GameState_Snake_SnakeState_descriptor_ = GameState_Snake_descriptor_->enum_type(0);
  GameMessage_descriptor_ = file->message_type(4);
  static const int GameMessage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, msg_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, receiver_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GameMessage_default_oneof_instance_, ping_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GameMessage_default_oneof_instance_, steer_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GameMessage_default_oneof_instance_, ack_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GameMessage_default_oneof_instance_, state_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GameMessage_default_oneof_instance_, announcement_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GameMessage_default_oneof_instance_, join_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GameMessage_default_oneof_instance_, error_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GameMessage_default_oneof_instance_, role_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, Type_),
  };
  GameMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_descriptor_,
      GameMessage::default_instance_,
      GameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _has_bits_[0]),
      -1,
      -1,
      GameMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _oneof_case_[0]),
      sizeof(GameMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _internal_metadata_),
      -1);
  GameMessage_PingMsg_descriptor_ = GameMessage_descriptor_->nested_type(0);
  static const int GameMessage_PingMsg_offsets_[1] = {
  };
  GameMessage_PingMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_PingMsg_descriptor_,
      GameMessage_PingMsg::default_instance_,
      GameMessage_PingMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_PingMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameMessage_PingMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_PingMsg, _internal_metadata_),
      -1);
  GameMessage_SteerMsg_descriptor_ = GameMessage_descriptor_->nested_type(1);
  static const int GameMessage_SteerMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_SteerMsg, direction_),
  };
  GameMessage_SteerMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_SteerMsg_descriptor_,
      GameMessage_SteerMsg::default_instance_,
      GameMessage_SteerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_SteerMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameMessage_SteerMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_SteerMsg, _internal_metadata_),
      -1);
  GameMessage_AckMsg_descriptor_ = GameMessage_descriptor_->nested_type(2);
  static const int GameMessage_AckMsg_offsets_[1] = {
  };
  GameMessage_AckMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_AckMsg_descriptor_,
      GameMessage_AckMsg::default_instance_,
      GameMessage_AckMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_AckMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameMessage_AckMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_AckMsg, _internal_metadata_),
      -1);
  GameMessage_StateMsg_descriptor_ = GameMessage_descriptor_->nested_type(3);
  static const int GameMessage_StateMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_StateMsg, state_),
  };
  GameMessage_StateMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_StateMsg_descriptor_,
      GameMessage_StateMsg::default_instance_,
      GameMessage_StateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_StateMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameMessage_StateMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_StateMsg, _internal_metadata_),
      -1);
  GameMessage_AnnouncementMsg_descriptor_ = GameMessage_descriptor_->nested_type(4);
  static const int GameMessage_AnnouncementMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_AnnouncementMsg, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_AnnouncementMsg, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_AnnouncementMsg, can_join_),
  };
  GameMessage_AnnouncementMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_AnnouncementMsg_descriptor_,
      GameMessage_AnnouncementMsg::default_instance_,
      GameMessage_AnnouncementMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_AnnouncementMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameMessage_AnnouncementMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_AnnouncementMsg, _internal_metadata_),
      -1);
  GameMessage_JoinMsg_descriptor_ = GameMessage_descriptor_->nested_type(5);
  static const int GameMessage_JoinMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_JoinMsg, player_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_JoinMsg, only_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_JoinMsg, name_),
  };
  GameMessage_JoinMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_JoinMsg_descriptor_,
      GameMessage_JoinMsg::default_instance_,
      GameMessage_JoinMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_JoinMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameMessage_JoinMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_JoinMsg, _internal_metadata_),
      -1);
  GameMessage_ErrorMsg_descriptor_ = GameMessage_descriptor_->nested_type(6);
  static const int GameMessage_ErrorMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_ErrorMsg, error_message_),
  };
  GameMessage_ErrorMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_ErrorMsg_descriptor_,
      GameMessage_ErrorMsg::default_instance_,
      GameMessage_ErrorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_ErrorMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameMessage_ErrorMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_ErrorMsg, _internal_metadata_),
      -1);
  GameMessage_RoleChangeMsg_descriptor_ = GameMessage_descriptor_->nested_type(7);
  static const int GameMessage_RoleChangeMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_RoleChangeMsg, sender_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_RoleChangeMsg, receiver_role_),
  };
  GameMessage_RoleChangeMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_RoleChangeMsg_descriptor_,
      GameMessage_RoleChangeMsg::default_instance_,
      GameMessage_RoleChangeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_RoleChangeMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameMessage_RoleChangeMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_RoleChangeMsg, _internal_metadata_),
      -1);
  NodeRole_descriptor_ = file->enum_type(0);
  PlayerType_descriptor_ = file->enum_type(1);
  Direction_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_snakes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GamePlayer_descriptor_, &GamePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameConfig_descriptor_, &GameConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GamePlayers_descriptor_, &GamePlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameState_descriptor_, &GameState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameState_Coord_descriptor_, &GameState_Coord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameState_Snake_descriptor_, &GameState_Snake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_descriptor_, &GameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_PingMsg_descriptor_, &GameMessage_PingMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_SteerMsg_descriptor_, &GameMessage_SteerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_AckMsg_descriptor_, &GameMessage_AckMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_StateMsg_descriptor_, &GameMessage_StateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_AnnouncementMsg_descriptor_, &GameMessage_AnnouncementMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_JoinMsg_descriptor_, &GameMessage_JoinMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_ErrorMsg_descriptor_, &GameMessage_ErrorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_RoleChangeMsg_descriptor_, &GameMessage_RoleChangeMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_snakes_2eproto() {
  delete GamePlayer::default_instance_;
  delete GamePlayer_reflection_;
  delete GameConfig::default_instance_;
  delete GameConfig_reflection_;
  delete GamePlayers::default_instance_;
  delete GamePlayers_reflection_;
  delete GameState::default_instance_;
  delete GameState_reflection_;
  delete GameState_Coord::default_instance_;
  delete GameState_Coord_reflection_;
  delete GameState_Snake::default_instance_;
  delete GameState_Snake_reflection_;
  delete GameMessage::default_instance_;
  delete GameMessage_default_oneof_instance_;
  delete GameMessage_reflection_;
  delete GameMessage_PingMsg::default_instance_;
  delete GameMessage_PingMsg_reflection_;
  delete GameMessage_SteerMsg::default_instance_;
  delete GameMessage_SteerMsg_reflection_;
  delete GameMessage_AckMsg::default_instance_;
  delete GameMessage_AckMsg_reflection_;
  delete GameMessage_StateMsg::default_instance_;
  delete GameMessage_StateMsg_reflection_;
  delete GameMessage_AnnouncementMsg::default_instance_;
  delete GameMessage_AnnouncementMsg_reflection_;
  delete GameMessage_JoinMsg::default_instance_;
  delete GameMessage_JoinMsg_reflection_;
  delete GameMessage_ErrorMsg::default_instance_;
  delete GameMessage_ErrorMsg_reflection_;
  delete GameMessage_RoleChangeMsg::default_instance_;
  delete GameMessage_RoleChangeMsg_reflection_;
}

void protobuf_AddDesc_snakes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_snakes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014snakes.proto\022\006snakes\"\240\001\n\nGamePlayer\022\014\n"
    "\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\022\n\nip_address\030\003 "
    "\002(\t\022\014\n\004port\030\004 \002(\005\022\036\n\004role\030\005 \002(\0162\020.snakes"
    ".NodeRole\022\'\n\004type\030\006 \001(\0162\022.snakes.PlayerT"
    "ype:\005HUMAN\022\r\n\005score\030\007 \002(\005\"\334\001\n\nGameConfig"
    "\022\021\n\005width\030\001 \001(\005:\00240\022\022\n\006height\030\002 \001(\005:\00230\022"
    "\026\n\013food_static\030\003 \001(\005:\0011\022\032\n\017food_per_play"
    "er\030\004 \001(\002:\0011\022\034\n\016state_delay_ms\030\005 \001(\005:\004100"
    "0\022\033\n\016dead_food_prob\030\006 \001(\002:\0030.1\022\032\n\rping_d"
    "elay_ms\030\007 \001(\005:\003100\022\034\n\017node_timeout_ms\030\010 "
    "\001(\005:\003800\"2\n\013GamePlayers\022#\n\007players\030\001 \003(\013"
    "2\022.snakes.GamePlayer\"\260\003\n\tGameState\022\023\n\013st"
    "ate_order\030\001 \002(\005\022\'\n\006snakes\030\002 \003(\0132\027.snakes"
    ".GameState.Snake\022&\n\005foods\030\003 \003(\0132\027.snakes"
    ".GameState.Coord\022$\n\007players\030\004 \002(\0132\023.snak"
    "es.GamePlayers\022\"\n\006config\030\005 \002(\0132\022.snakes."
    "GameConfig\032#\n\005Coord\022\014\n\001x\030\001 \001(\021:\0010\022\014\n\001y\030\002"
    " \001(\021:\0010\032\315\001\n\005Snake\022\021\n\tplayer_id\030\001 \002(\005\022\'\n\006"
    "points\030\002 \003(\0132\027.snakes.GameState.Coord\0228\n"
    "\005state\030\003 \002(\0162\".snakes.GameState.Snake.Sn"
    "akeState:\005ALIVE\022)\n\016head_direction\030\004 \002(\0162"
    "\021.snakes.Direction\"#\n\nSnakeState\022\t\n\005ALIV"
    "E\020\000\022\n\n\006ZOMBIE\020\001\"\250\007\n\013GameMessage\022\017\n\007msg_s"
    "eq\030\001 \002(\003\022\021\n\tsender_id\030\n \001(\005\022\023\n\013receiver_"
    "id\030\013 \001(\005\022+\n\004ping\030\002 \001(\0132\033.snakes.GameMess"
    "age.PingMsgH\000\022-\n\005steer\030\003 \001(\0132\034.snakes.Ga"
    "meMessage.SteerMsgH\000\022)\n\003ack\030\004 \001(\0132\032.snak"
    "es.GameMessage.AckMsgH\000\022-\n\005state\030\005 \001(\0132\034"
    ".snakes.GameMessage.StateMsgH\000\022;\n\014announ"
    "cement\030\006 \001(\0132#.snakes.GameMessage.Announ"
    "cementMsgH\000\022+\n\004join\030\007 \001(\0132\033.snakes.GameM"
    "essage.JoinMsgH\000\022-\n\005error\030\010 \001(\0132\034.snakes"
    ".GameMessage.ErrorMsgH\000\0228\n\013role_change\030\t"
    " \001(\0132!.snakes.GameMessage.RoleChangeMsgH"
    "\000\032\t\n\007PingMsg\0320\n\010SteerMsg\022$\n\tdirection\030\001 "
    "\002(\0162\021.snakes.Direction\032\010\n\006AckMsg\032,\n\010Stat"
    "eMsg\022 \n\005state\030\001 \002(\0132\021.snakes.GameState\032s"
    "\n\017AnnouncementMsg\022$\n\007players\030\001 \002(\0132\023.sna"
    "kes.GamePlayers\022\"\n\006config\030\002 \002(\0132\022.snakes"
    ".GameConfig\022\026\n\010can_join\030\003 \001(\010:\004true\032a\n\007J"
    "oinMsg\022.\n\013player_type\030\001 \001(\0162\022.snakes.Pla"
    "yerType:\005HUMAN\022\030\n\tonly_view\030\002 \001(\010:\005false"
    "\022\014\n\004name\030\003 \002(\t\032!\n\010ErrorMsg\022\025\n\rerror_mess"
    "age\030\001 \002(\t\032_\n\rRoleChangeMsg\022%\n\013sender_rol"
    "e\030\001 \001(\0162\020.snakes.NodeRole\022\'\n\rreceiver_ro"
    "le\030\002 \001(\0162\020.snakes.NodeRoleB\006\n\004Type*:\n\010No"
    "deRole\022\n\n\006NORMAL\020\000\022\n\n\006MASTER\020\001\022\n\n\006DEPUTY"
    "\020\002\022\n\n\006VIEWER\020\003*\"\n\nPlayerType\022\t\n\005HUMAN\020\000\022"
    "\t\n\005ROBOT\020\001*2\n\tDirection\022\006\n\002UP\020\001\022\010\n\004DOWN\020"
    "\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004B&\n\027me.ippolitov.f"
    "it.snakesB\013SnakesProto", 2022);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "snakes.proto", &protobuf_RegisterTypes);
  GamePlayer::default_instance_ = new GamePlayer();
  GameConfig::default_instance_ = new GameConfig();
  GamePlayers::default_instance_ = new GamePlayers();
  GameState::default_instance_ = new GameState();
  GameState_Coord::default_instance_ = new GameState_Coord();
  GameState_Snake::default_instance_ = new GameState_Snake();
  GameMessage::default_instance_ = new GameMessage();
  GameMessage_default_oneof_instance_ = new GameMessageOneofInstance();
  GameMessage_PingMsg::default_instance_ = new GameMessage_PingMsg();
  GameMessage_SteerMsg::default_instance_ = new GameMessage_SteerMsg();
  GameMessage_AckMsg::default_instance_ = new GameMessage_AckMsg();
  GameMessage_StateMsg::default_instance_ = new GameMessage_StateMsg();
  GameMessage_AnnouncementMsg::default_instance_ = new GameMessage_AnnouncementMsg();
  GameMessage_JoinMsg::default_instance_ = new GameMessage_JoinMsg();
  GameMessage_ErrorMsg::default_instance_ = new GameMessage_ErrorMsg();
  GameMessage_RoleChangeMsg::default_instance_ = new GameMessage_RoleChangeMsg();
  GamePlayer::default_instance_->InitAsDefaultInstance();
  GameConfig::default_instance_->InitAsDefaultInstance();
  GamePlayers::default_instance_->InitAsDefaultInstance();
  GameState::default_instance_->InitAsDefaultInstance();
  GameState_Coord::default_instance_->InitAsDefaultInstance();
  GameState_Snake::default_instance_->InitAsDefaultInstance();
  GameMessage::default_instance_->InitAsDefaultInstance();
  GameMessage_PingMsg::default_instance_->InitAsDefaultInstance();
  GameMessage_SteerMsg::default_instance_->InitAsDefaultInstance();
  GameMessage_AckMsg::default_instance_->InitAsDefaultInstance();
  GameMessage_StateMsg::default_instance_->InitAsDefaultInstance();
  GameMessage_AnnouncementMsg::default_instance_->InitAsDefaultInstance();
  GameMessage_JoinMsg::default_instance_->InitAsDefaultInstance();
  GameMessage_ErrorMsg::default_instance_->InitAsDefaultInstance();
  GameMessage_RoleChangeMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_snakes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_snakes_2eproto {
  StaticDescriptorInitializer_snakes_2eproto() {
    protobuf_AddDesc_snakes_2eproto();
  }
} static_descriptor_initializer_snakes_2eproto_;
const ::google::protobuf::EnumDescriptor* NodeRole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRole_descriptor_;
}
bool NodeRole_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerType_descriptor_;
}
bool PlayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Direction_descriptor_;
}
bool Direction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamePlayer::kNameFieldNumber;
const int GamePlayer::kIdFieldNumber;
const int GamePlayer::kIpAddressFieldNumber;
const int GamePlayer::kPortFieldNumber;
const int GamePlayer::kRoleFieldNumber;
const int GamePlayer::kTypeFieldNumber;
const int GamePlayer::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamePlayer::GamePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GamePlayer)
}

void GamePlayer::InitAsDefaultInstance() {
}

GamePlayer::GamePlayer(const GamePlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GamePlayer)
}

void GamePlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  role_ = 0;
  type_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayer::~GamePlayer() {
  // @@protoc_insertion_point(destructor:snakes.GamePlayer)
  SharedDtor();
}

void GamePlayer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GamePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayer_descriptor_;
}

const GamePlayer& GamePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GamePlayer* GamePlayer::default_instance_ = NULL;

GamePlayer* GamePlayer::New(::google::protobuf::Arena* arena) const {
  GamePlayer* n = new GamePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GamePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GamePlayer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GamePlayer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GamePlayer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(id_, score_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip_address()) {
      ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GamePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GamePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "snakes.GamePlayer.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip_address;
        break;
      }

      // required string ip_address = 3;
      case 3: {
        if (tag == 26) {
         parse_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_address().data(), this->ip_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "snakes.GamePlayer.ip_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_role;
        break;
      }

      // required .snakes.NodeRole role = 5;
      case 5: {
        if (tag == 40) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snakes::NodeRole_IsValid(value)) {
            set_role(static_cast< ::snakes::NodeRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .snakes.PlayerType type = 6 [default = HUMAN];
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snakes::PlayerType_IsValid(value)) {
            set_type(static_cast< ::snakes::PlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_score;
        break;
      }

      // required int32 score = 7;
      case 7: {
        if (tag == 56) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GamePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GamePlayer)
  return false;
#undef DO_
}

void GamePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GamePlayer)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snakes.GamePlayer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required string ip_address = 3;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snakes.GamePlayer.ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip_address(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // required .snakes.NodeRole role = 5;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->role(), output);
  }

  // optional .snakes.PlayerType type = 6 [default = HUMAN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // required int32 score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GamePlayer)
}

::google::protobuf::uint8* GamePlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GamePlayer)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snakes.GamePlayer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required string ip_address = 3;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snakes.GamePlayer.ip_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip_address(), target);
  }

  // required int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // required .snakes.NodeRole role = 5;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->role(), target);
  }

  // optional .snakes.PlayerType type = 6 [default = HUMAN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // required int32 score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GamePlayer)
  return target;
}

int GamePlayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snakes.GamePlayer)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_ip_address()) {
    // required string ip_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_address());
  }

  if (has_port()) {
    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  if (has_role()) {
    // required .snakes.NodeRole role = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
  }

  if (has_score()) {
    // required int32 score = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  return total_size;
}
int GamePlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GamePlayer)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string ip_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_address());

    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

    // required .snakes.NodeRole role = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());

    // required int32 score = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .snakes.PlayerType type = 6 [default = HUMAN];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GamePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GamePlayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GamePlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GamePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GamePlayer)
    MergeFrom(*source);
  }
}

void GamePlayer::MergeFrom(const GamePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GamePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip_address()) {
      set_has_ip_address();
      ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GamePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GamePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayer::CopyFrom(const GamePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GamePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void GamePlayer::Swap(GamePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamePlayer::InternalSwap(GamePlayer* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  ip_address_.Swap(&other->ip_address_);
  std::swap(port_, other->port_);
  std::swap(role_, other->role_);
  std::swap(type_, other->type_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GamePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayer_descriptor_;
  metadata.reflection = GamePlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GamePlayer

// required string name = 1;
bool GamePlayer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GamePlayer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void GamePlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void GamePlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& GamePlayer::name() const {
  // @@protoc_insertion_point(field_get:snakes.GamePlayer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GamePlayer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snakes.GamePlayer.name)
}
 void GamePlayer::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snakes.GamePlayer.name)
}
 void GamePlayer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snakes.GamePlayer.name)
}
 ::std::string* GamePlayer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:snakes.GamePlayer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GamePlayer::release_name() {
  // @@protoc_insertion_point(field_release:snakes.GamePlayer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GamePlayer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:snakes.GamePlayer.name)
}

// required int32 id = 2;
bool GamePlayer::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GamePlayer::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GamePlayer::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GamePlayer::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 GamePlayer::id() const {
  // @@protoc_insertion_point(field_get:snakes.GamePlayer.id)
  return id_;
}
 void GamePlayer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:snakes.GamePlayer.id)
}

// required string ip_address = 3;
bool GamePlayer::has_ip_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GamePlayer::set_has_ip_address() {
  _has_bits_[0] |= 0x00000004u;
}
void GamePlayer::clear_has_ip_address() {
  _has_bits_[0] &= ~0x00000004u;
}
void GamePlayer::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_address();
}
 const ::std::string& GamePlayer::ip_address() const {
  // @@protoc_insertion_point(field_get:snakes.GamePlayer.ip_address)
  return ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GamePlayer::set_ip_address(const ::std::string& value) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snakes.GamePlayer.ip_address)
}
 void GamePlayer::set_ip_address(const char* value) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snakes.GamePlayer.ip_address)
}
 void GamePlayer::set_ip_address(const char* value, size_t size) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snakes.GamePlayer.ip_address)
}
 ::std::string* GamePlayer::mutable_ip_address() {
  set_has_ip_address();
  // @@protoc_insertion_point(field_mutable:snakes.GamePlayer.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GamePlayer::release_ip_address() {
  // @@protoc_insertion_point(field_release:snakes.GamePlayer.ip_address)
  clear_has_ip_address();
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GamePlayer::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    set_has_ip_address();
  } else {
    clear_has_ip_address();
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:snakes.GamePlayer.ip_address)
}

// required int32 port = 4;
bool GamePlayer::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GamePlayer::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void GamePlayer::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void GamePlayer::clear_port() {
  port_ = 0;
  clear_has_port();
}
 ::google::protobuf::int32 GamePlayer::port() const {
  // @@protoc_insertion_point(field_get:snakes.GamePlayer.port)
  return port_;
}
 void GamePlayer::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:snakes.GamePlayer.port)
}

// required .snakes.NodeRole role = 5;
bool GamePlayer::has_role() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GamePlayer::set_has_role() {
  _has_bits_[0] |= 0x00000010u;
}
void GamePlayer::clear_has_role() {
  _has_bits_[0] &= ~0x00000010u;
}
void GamePlayer::clear_role() {
  role_ = 0;
  clear_has_role();
}
 ::snakes::NodeRole GamePlayer::role() const {
  // @@protoc_insertion_point(field_get:snakes.GamePlayer.role)
  return static_cast< ::snakes::NodeRole >(role_);
}
 void GamePlayer::set_role(::snakes::NodeRole value) {
  assert(::snakes::NodeRole_IsValid(value));
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:snakes.GamePlayer.role)
}

// optional .snakes.PlayerType type = 6 [default = HUMAN];
bool GamePlayer::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GamePlayer::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void GamePlayer::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void GamePlayer::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::snakes::PlayerType GamePlayer::type() const {
  // @@protoc_insertion_point(field_get:snakes.GamePlayer.type)
  return static_cast< ::snakes::PlayerType >(type_);
}
 void GamePlayer::set_type(::snakes::PlayerType value) {
  assert(::snakes::PlayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:snakes.GamePlayer.type)
}

// required int32 score = 7;
bool GamePlayer::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GamePlayer::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
void GamePlayer::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void GamePlayer::clear_score() {
  score_ = 0;
  clear_has_score();
}
 ::google::protobuf::int32 GamePlayer::score() const {
  // @@protoc_insertion_point(field_get:snakes.GamePlayer.score)
  return score_;
}
 void GamePlayer::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:snakes.GamePlayer.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConfig::kWidthFieldNumber;
const int GameConfig::kHeightFieldNumber;
const int GameConfig::kFoodStaticFieldNumber;
const int GameConfig::kFoodPerPlayerFieldNumber;
const int GameConfig::kStateDelayMsFieldNumber;
const int GameConfig::kDeadFoodProbFieldNumber;
const int GameConfig::kPingDelayMsFieldNumber;
const int GameConfig::kNodeTimeoutMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConfig::GameConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameConfig)
}

void GameConfig::InitAsDefaultInstance() {
}

GameConfig::GameConfig(const GameConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameConfig)
}

void GameConfig::SharedCtor() {
  _cached_size_ = 0;
  width_ = 40;
  height_ = 30;
  food_static_ = 1;
  food_per_player_ = 1;
  state_delay_ms_ = 1000;
  dead_food_prob_ = 0.1f;
  ping_delay_ms_ = 100;
  node_timeout_ms_ = 800;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameConfig::~GameConfig() {
  // @@protoc_insertion_point(destructor:snakes.GameConfig)
  SharedDtor();
}

void GameConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameConfig_descriptor_;
}

const GameConfig& GameConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameConfig* GameConfig::default_instance_ = NULL;

GameConfig* GameConfig::New(::google::protobuf::Arena* arena) const {
  GameConfig* n = new GameConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameConfig)
  if (_has_bits_[0 / 32] & 255u) {
    width_ = 40;
    height_ = 30;
    food_static_ = 1;
    food_per_player_ = 1;
    state_delay_ms_ = 1000;
    dead_food_prob_ = 0.1f;
    ping_delay_ms_ = 100;
    node_timeout_ms_ = 800;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1 [default = 40];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2 [default = 30];
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_food_static;
        break;
      }

      // optional int32 food_static = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_food_static:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_static_)));
          set_has_food_static();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_food_per_player;
        break;
      }

      // optional float food_per_player = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_food_per_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &food_per_player_)));
          set_has_food_per_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state_delay_ms;
        break;
      }

      // optional int32 state_delay_ms = 5 [default = 1000];
      case 5: {
        if (tag == 40) {
         parse_state_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_delay_ms_)));
          set_has_state_delay_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_dead_food_prob;
        break;
      }

      // optional float dead_food_prob = 6 [default = 0.1];
      case 6: {
        if (tag == 53) {
         parse_dead_food_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dead_food_prob_)));
          set_has_dead_food_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ping_delay_ms;
        break;
      }

      // optional int32 ping_delay_ms = 7 [default = 100];
      case 7: {
        if (tag == 56) {
         parse_ping_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ping_delay_ms_)));
          set_has_ping_delay_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_node_timeout_ms;
        break;
      }

      // optional int32 node_timeout_ms = 8 [default = 800];
      case 8: {
        if (tag == 64) {
         parse_node_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_timeout_ms_)));
          set_has_node_timeout_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameConfig)
  return false;
#undef DO_
}

void GameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameConfig)
  // optional int32 width = 1 [default = 40];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2 [default = 30];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 food_static = 3 [default = 1];
  if (has_food_static()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->food_static(), output);
  }

  // optional float food_per_player = 4 [default = 1];
  if (has_food_per_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->food_per_player(), output);
  }

  // optional int32 state_delay_ms = 5 [default = 1000];
  if (has_state_delay_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state_delay_ms(), output);
  }

  // optional float dead_food_prob = 6 [default = 0.1];
  if (has_dead_food_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dead_food_prob(), output);
  }

  // optional int32 ping_delay_ms = 7 [default = 100];
  if (has_ping_delay_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ping_delay_ms(), output);
  }

  // optional int32 node_timeout_ms = 8 [default = 800];
  if (has_node_timeout_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->node_timeout_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameConfig)
}

::google::protobuf::uint8* GameConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameConfig)
  // optional int32 width = 1 [default = 40];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2 [default = 30];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 food_static = 3 [default = 1];
  if (has_food_static()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->food_static(), target);
  }

  // optional float food_per_player = 4 [default = 1];
  if (has_food_per_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->food_per_player(), target);
  }

  // optional int32 state_delay_ms = 5 [default = 1000];
  if (has_state_delay_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state_delay_ms(), target);
  }

  // optional float dead_food_prob = 6 [default = 0.1];
  if (has_dead_food_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dead_food_prob(), target);
  }

  // optional int32 ping_delay_ms = 7 [default = 100];
  if (has_ping_delay_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ping_delay_ms(), target);
  }

  // optional int32 node_timeout_ms = 8 [default = 800];
  if (has_node_timeout_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->node_timeout_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameConfig)
  return target;
}

int GameConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 width = 1 [default = 40];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2 [default = 30];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 food_static = 3 [default = 1];
    if (has_food_static()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food_static());
    }

    // optional float food_per_player = 4 [default = 1];
    if (has_food_per_player()) {
      total_size += 1 + 4;
    }

    // optional int32 state_delay_ms = 5 [default = 1000];
    if (has_state_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_delay_ms());
    }

    // optional float dead_food_prob = 6 [default = 0.1];
    if (has_dead_food_prob()) {
      total_size += 1 + 4;
    }

    // optional int32 ping_delay_ms = 7 [default = 100];
    if (has_ping_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ping_delay_ms());
    }

    // optional int32 node_timeout_ms = 8 [default = 800];
    if (has_node_timeout_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_timeout_ms());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameConfig)
    MergeFrom(*source);
  }
}

void GameConfig::MergeFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_food_static()) {
      set_food_static(from.food_static());
    }
    if (from.has_food_per_player()) {
      set_food_per_player(from.food_per_player());
    }
    if (from.has_state_delay_ms()) {
      set_state_delay_ms(from.state_delay_ms());
    }
    if (from.has_dead_food_prob()) {
      set_dead_food_prob(from.dead_food_prob());
    }
    if (from.has_ping_delay_ms()) {
      set_ping_delay_ms(from.ping_delay_ms());
    }
    if (from.has_node_timeout_ms()) {
      set_node_timeout_ms(from.node_timeout_ms());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConfig::CopyFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConfig::IsInitialized() const {

  return true;
}

void GameConfig::Swap(GameConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConfig::InternalSwap(GameConfig* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(food_static_, other->food_static_);
  std::swap(food_per_player_, other->food_per_player_);
  std::swap(state_delay_ms_, other->state_delay_ms_);
  std::swap(dead_food_prob_, other->dead_food_prob_);
  std::swap(ping_delay_ms_, other->ping_delay_ms_);
  std::swap(node_timeout_ms_, other->node_timeout_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameConfig_descriptor_;
  metadata.reflection = GameConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameConfig

// optional int32 width = 1 [default = 40];
bool GameConfig::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameConfig::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void GameConfig::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameConfig::clear_width() {
  width_ = 40;
  clear_has_width();
}
 ::google::protobuf::int32 GameConfig::width() const {
  // @@protoc_insertion_point(field_get:snakes.GameConfig.width)
  return width_;
}
 void GameConfig::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameConfig.width)
}

// optional int32 height = 2 [default = 30];
bool GameConfig::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameConfig::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void GameConfig::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameConfig::clear_height() {
  height_ = 30;
  clear_has_height();
}
 ::google::protobuf::int32 GameConfig::height() const {
  // @@protoc_insertion_point(field_get:snakes.GameConfig.height)
  return height_;
}
 void GameConfig::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameConfig.height)
}

// optional int32 food_static = 3 [default = 1];
bool GameConfig::has_food_static() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameConfig::set_has_food_static() {
  _has_bits_[0] |= 0x00000004u;
}
void GameConfig::clear_has_food_static() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameConfig::clear_food_static() {
  food_static_ = 1;
  clear_has_food_static();
}
 ::google::protobuf::int32 GameConfig::food_static() const {
  // @@protoc_insertion_point(field_get:snakes.GameConfig.food_static)
  return food_static_;
}
 void GameConfig::set_food_static(::google::protobuf::int32 value) {
  set_has_food_static();
  food_static_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameConfig.food_static)
}

// optional float food_per_player = 4 [default = 1];
bool GameConfig::has_food_per_player() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameConfig::set_has_food_per_player() {
  _has_bits_[0] |= 0x00000008u;
}
void GameConfig::clear_has_food_per_player() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameConfig::clear_food_per_player() {
  food_per_player_ = 1;
  clear_has_food_per_player();
}
 float GameConfig::food_per_player() const {
  // @@protoc_insertion_point(field_get:snakes.GameConfig.food_per_player)
  return food_per_player_;
}
 void GameConfig::set_food_per_player(float value) {
  set_has_food_per_player();
  food_per_player_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameConfig.food_per_player)
}

// optional int32 state_delay_ms = 5 [default = 1000];
bool GameConfig::has_state_delay_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameConfig::set_has_state_delay_ms() {
  _has_bits_[0] |= 0x00000010u;
}
void GameConfig::clear_has_state_delay_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameConfig::clear_state_delay_ms() {
  state_delay_ms_ = 1000;
  clear_has_state_delay_ms();
}
 ::google::protobuf::int32 GameConfig::state_delay_ms() const {
  // @@protoc_insertion_point(field_get:snakes.GameConfig.state_delay_ms)
  return state_delay_ms_;
}
 void GameConfig::set_state_delay_ms(::google::protobuf::int32 value) {
  set_has_state_delay_ms();
  state_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameConfig.state_delay_ms)
}

// optional float dead_food_prob = 6 [default = 0.1];
bool GameConfig::has_dead_food_prob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameConfig::set_has_dead_food_prob() {
  _has_bits_[0] |= 0x00000020u;
}
void GameConfig::clear_has_dead_food_prob() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameConfig::clear_dead_food_prob() {
  dead_food_prob_ = 0.1f;
  clear_has_dead_food_prob();
}
 float GameConfig::dead_food_prob() const {
  // @@protoc_insertion_point(field_get:snakes.GameConfig.dead_food_prob)
  return dead_food_prob_;
}
 void GameConfig::set_dead_food_prob(float value) {
  set_has_dead_food_prob();
  dead_food_prob_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameConfig.dead_food_prob)
}

// optional int32 ping_delay_ms = 7 [default = 100];
bool GameConfig::has_ping_delay_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameConfig::set_has_ping_delay_ms() {
  _has_bits_[0] |= 0x00000040u;
}
void GameConfig::clear_has_ping_delay_ms() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameConfig::clear_ping_delay_ms() {
  ping_delay_ms_ = 100;
  clear_has_ping_delay_ms();
}
 ::google::protobuf::int32 GameConfig::ping_delay_ms() const {
  // @@protoc_insertion_point(field_get:snakes.GameConfig.ping_delay_ms)
  return ping_delay_ms_;
}
 void GameConfig::set_ping_delay_ms(::google::protobuf::int32 value) {
  set_has_ping_delay_ms();
  ping_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameConfig.ping_delay_ms)
}

// optional int32 node_timeout_ms = 8 [default = 800];
bool GameConfig::has_node_timeout_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GameConfig::set_has_node_timeout_ms() {
  _has_bits_[0] |= 0x00000080u;
}
void GameConfig::clear_has_node_timeout_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
void GameConfig::clear_node_timeout_ms() {
  node_timeout_ms_ = 800;
  clear_has_node_timeout_ms();
}
 ::google::protobuf::int32 GameConfig::node_timeout_ms() const {
  // @@protoc_insertion_point(field_get:snakes.GameConfig.node_timeout_ms)
  return node_timeout_ms_;
}
 void GameConfig::set_node_timeout_ms(::google::protobuf::int32 value) {
  set_has_node_timeout_ms();
  node_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameConfig.node_timeout_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamePlayers::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamePlayers::GamePlayers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GamePlayers)
}

void GamePlayers::InitAsDefaultInstance() {
}

GamePlayers::GamePlayers(const GamePlayers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GamePlayers)
}

void GamePlayers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayers::~GamePlayers() {
  // @@protoc_insertion_point(destructor:snakes.GamePlayers)
  SharedDtor();
}

void GamePlayers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayers_descriptor_;
}

const GamePlayers& GamePlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GamePlayers* GamePlayers::default_instance_ = NULL;

GamePlayers* GamePlayers::New(::google::protobuf::Arena* arena) const {
  GamePlayers* n = new GamePlayers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GamePlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GamePlayers)
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GamePlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GamePlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .snakes.GamePlayer players = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GamePlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GamePlayers)
  return false;
#undef DO_
}

void GamePlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GamePlayers)
  // repeated .snakes.GamePlayer players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GamePlayers)
}

::google::protobuf::uint8* GamePlayers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GamePlayers)
  // repeated .snakes.GamePlayer players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GamePlayers)
  return target;
}

int GamePlayers::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GamePlayers)
  int total_size = 0;

  // repeated .snakes.GamePlayer players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GamePlayers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GamePlayers* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GamePlayers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GamePlayers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GamePlayers)
    MergeFrom(*source);
  }
}

void GamePlayers::MergeFrom(const GamePlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GamePlayers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  players_.MergeFrom(from.players_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GamePlayers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GamePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayers::CopyFrom(const GamePlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GamePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayers::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void GamePlayers::Swap(GamePlayers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamePlayers::InternalSwap(GamePlayers* other) {
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GamePlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayers_descriptor_;
  metadata.reflection = GamePlayers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GamePlayers

// repeated .snakes.GamePlayer players = 1;
int GamePlayers::players_size() const {
  return players_.size();
}
void GamePlayers::clear_players() {
  players_.Clear();
}
const ::snakes::GamePlayer& GamePlayers::players(int index) const {
  // @@protoc_insertion_point(field_get:snakes.GamePlayers.players)
  return players_.Get(index);
}
::snakes::GamePlayer* GamePlayers::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:snakes.GamePlayers.players)
  return players_.Mutable(index);
}
::snakes::GamePlayer* GamePlayers::add_players() {
  // @@protoc_insertion_point(field_add:snakes.GamePlayers.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::snakes::GamePlayer >*
GamePlayers::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:snakes.GamePlayers.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::snakes::GamePlayer >&
GamePlayers::players() const {
  // @@protoc_insertion_point(field_list:snakes.GamePlayers.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState_Coord::kXFieldNumber;
const int GameState_Coord::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState_Coord::GameState_Coord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameState.Coord)
}

void GameState_Coord::InitAsDefaultInstance() {
}

GameState_Coord::GameState_Coord(const GameState_Coord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameState.Coord)
}

void GameState_Coord::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameState_Coord::~GameState_Coord() {
  // @@protoc_insertion_point(destructor:snakes.GameState.Coord)
  SharedDtor();
}

void GameState_Coord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameState_Coord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameState_Coord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_Coord_descriptor_;
}

const GameState_Coord& GameState_Coord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameState_Coord* GameState_Coord::default_instance_ = NULL;

GameState_Coord* GameState_Coord::New(::google::protobuf::Arena* arena) const {
  GameState_Coord* n = new GameState_Coord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameState_Coord::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameState.Coord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameState_Coord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameState_Coord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameState_Coord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameState.Coord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 x = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional sint32 y = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameState.Coord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameState.Coord)
  return false;
#undef DO_
}

void GameState_Coord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameState.Coord)
  // optional sint32 x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }

  // optional sint32 y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameState.Coord)
}

::google::protobuf::uint8* GameState_Coord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameState.Coord)
  // optional sint32 x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }

  // optional sint32 y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameState.Coord)
  return target;
}

int GameState_Coord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameState.Coord)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }

    // optional sint32 y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameState_Coord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameState.Coord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameState_Coord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState_Coord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameState.Coord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameState.Coord)
    MergeFrom(*source);
  }
}

void GameState_Coord::MergeFrom(const GameState_Coord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameState.Coord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameState_Coord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameState.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState_Coord::CopyFrom(const GameState_Coord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameState.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState_Coord::IsInitialized() const {

  return true;
}

void GameState_Coord::Swap(GameState_Coord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState_Coord::InternalSwap(GameState_Coord* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameState_Coord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameState_Coord_descriptor_;
  metadata.reflection = GameState_Coord_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* GameState_Snake_SnakeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_Snake_SnakeState_descriptor_;
}
bool GameState_Snake_SnakeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameState_Snake_SnakeState GameState_Snake::ALIVE;
const GameState_Snake_SnakeState GameState_Snake::ZOMBIE;
const GameState_Snake_SnakeState GameState_Snake::SnakeState_MIN;
const GameState_Snake_SnakeState GameState_Snake::SnakeState_MAX;
const int GameState_Snake::SnakeState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState_Snake::kPlayerIdFieldNumber;
const int GameState_Snake::kPointsFieldNumber;
const int GameState_Snake::kStateFieldNumber;
const int GameState_Snake::kHeadDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState_Snake::GameState_Snake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameState.Snake)
}

void GameState_Snake::InitAsDefaultInstance() {
}

GameState_Snake::GameState_Snake(const GameState_Snake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameState.Snake)
}

void GameState_Snake::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  state_ = 0;
  head_direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameState_Snake::~GameState_Snake() {
  // @@protoc_insertion_point(destructor:snakes.GameState.Snake)
  SharedDtor();
}

void GameState_Snake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameState_Snake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameState_Snake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_Snake_descriptor_;
}

const GameState_Snake& GameState_Snake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameState_Snake* GameState_Snake::default_instance_ = NULL;

GameState_Snake* GameState_Snake::New(::google::protobuf::Arena* arena) const {
  GameState_Snake* n = new GameState_Snake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameState_Snake::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameState.Snake)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameState_Snake, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameState_Snake*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 13u) {
    ZR_(player_id_, state_);
    head_direction_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameState_Snake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameState.Snake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_points;
        break;
      }

      // repeated .snakes.GameState.Coord points = 2;
      case 2: {
        if (tag == 18) {
         parse_points:
          DO_(input->IncrementRecursionDepth());
         parse_loop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snakes::GameState_Snake_SnakeState_IsValid(value)) {
            set_state(static_cast< ::snakes::GameState_Snake_SnakeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_head_direction;
        break;
      }

      // required .snakes.Direction head_direction = 4;
      case 4: {
        if (tag == 32) {
         parse_head_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snakes::Direction_IsValid(value)) {
            set_head_direction(static_cast< ::snakes::Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameState.Snake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameState.Snake)
  return false;
#undef DO_
}

void GameState_Snake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameState.Snake)
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // repeated .snakes.GameState.Coord points = 2;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->points(i), output);
  }

  // required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required .snakes.Direction head_direction = 4;
  if (has_head_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->head_direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameState.Snake)
}

::google::protobuf::uint8* GameState_Snake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameState.Snake)
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // repeated .snakes.GameState.Coord points = 2;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->points(i), false, target);
  }

  // required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required .snakes.Direction head_direction = 4;
  if (has_head_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->head_direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameState.Snake)
  return target;
}

int GameState_Snake::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snakes.GameState.Snake)
  int total_size = 0;

  if (has_player_id()) {
    // required int32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  if (has_state()) {
    // required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_head_direction()) {
    // required .snakes.Direction head_direction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->head_direction());
  }

  return total_size;
}
int GameState_Snake::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameState.Snake)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required int32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());

    // required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required .snakes.Direction head_direction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->head_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .snakes.GameState.Coord points = 2;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameState_Snake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameState.Snake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameState_Snake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState_Snake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameState.Snake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameState.Snake)
    MergeFrom(*source);
  }
}

void GameState_Snake::MergeFrom(const GameState_Snake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameState.Snake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_head_direction()) {
      set_head_direction(from.head_direction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameState_Snake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameState.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState_Snake::CopyFrom(const GameState_Snake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameState.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState_Snake::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void GameState_Snake::Swap(GameState_Snake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState_Snake::InternalSwap(GameState_Snake* other) {
  std::swap(player_id_, other->player_id_);
  points_.UnsafeArenaSwap(&other->points_);
  std::swap(state_, other->state_);
  std::swap(head_direction_, other->head_direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameState_Snake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameState_Snake_descriptor_;
  metadata.reflection = GameState_Snake_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState::kStateOrderFieldNumber;
const int GameState::kSnakesFieldNumber;
const int GameState::kFoodsFieldNumber;
const int GameState::kPlayersFieldNumber;
const int GameState::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState::GameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameState)
}

void GameState::InitAsDefaultInstance() {
  players_ = const_cast< ::snakes::GamePlayers*>(&::snakes::GamePlayers::default_instance());
  config_ = const_cast< ::snakes::GameConfig*>(&::snakes::GameConfig::default_instance());
}

GameState::GameState(const GameState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameState)
}

void GameState::SharedCtor() {
  _cached_size_ = 0;
  state_order_ = 0;
  players_ = NULL;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:snakes.GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
  if (this != default_instance_) {
    delete players_;
    delete config_;
  }
}

void GameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_descriptor_;
}

const GameState& GameState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameState* GameState::default_instance_ = NULL;

GameState* GameState::New(::google::protobuf::Arena* arena) const {
  GameState* n = new GameState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameState)
  if (_has_bits_[0 / 32] & 25u) {
    state_order_ = 0;
    if (has_players()) {
      if (players_ != NULL) players_->::snakes::GamePlayers::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::snakes::GameConfig::Clear();
    }
  }
  snakes_.Clear();
  foods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state_order = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_order_)));
          set_has_state_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_snakes;
        break;
      }

      // repeated .snakes.GameState.Snake snakes = 2;
      case 2: {
        if (tag == 18) {
         parse_snakes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_snakes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_snakes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_snakes;
        if (input->ExpectTag(26)) goto parse_loop_foods;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .snakes.GameState.Coord foods = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_foods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_foods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_foods;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // required .snakes.GamePlayers players = 4;
      case 4: {
        if (tag == 34) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_config;
        break;
      }

      // required .snakes.GameConfig config = 5;
      case 5: {
        if (tag == 42) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameState)
  // required int32 state_order = 1;
  if (has_state_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state_order(), output);
  }

  // repeated .snakes.GameState.Snake snakes = 2;
  for (unsigned int i = 0, n = this->snakes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->snakes(i), output);
  }

  // repeated .snakes.GameState.Coord foods = 3;
  for (unsigned int i = 0, n = this->foods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->foods(i), output);
  }

  // required .snakes.GamePlayers players = 4;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->players_, output);
  }

  // required .snakes.GameConfig config = 5;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameState)
}

::google::protobuf::uint8* GameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameState)
  // required int32 state_order = 1;
  if (has_state_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state_order(), target);
  }

  // repeated .snakes.GameState.Snake snakes = 2;
  for (unsigned int i = 0, n = this->snakes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->snakes(i), false, target);
  }

  // repeated .snakes.GameState.Coord foods = 3;
  for (unsigned int i = 0, n = this->foods_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->foods(i), false, target);
  }

  // required .snakes.GamePlayers players = 4;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->players_, false, target);
  }

  // required .snakes.GameConfig config = 5;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameState)
  return target;
}

int GameState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snakes.GameState)
  int total_size = 0;

  if (has_state_order()) {
    // required int32 state_order = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state_order());
  }

  if (has_players()) {
    // required .snakes.GamePlayers players = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->players_);
  }

  if (has_config()) {
    // required .snakes.GameConfig config = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  return total_size;
}
int GameState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameState)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required int32 state_order = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state_order());

    // required .snakes.GamePlayers players = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->players_);

    // required .snakes.GameConfig config = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .snakes.GameState.Snake snakes = 2;
  total_size += 1 * this->snakes_size();
  for (int i = 0; i < this->snakes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->snakes(i));
  }

  // repeated .snakes.GameState.Coord foods = 3;
  total_size += 1 * this->foods_size();
  for (int i = 0; i < this->foods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->foods(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  snakes_.MergeFrom(from.snakes_);
  foods_.MergeFrom(from.foods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state_order()) {
      set_state_order(from.state_order());
    }
    if (from.has_players()) {
      mutable_players()->::snakes::GamePlayers::MergeFrom(from.players());
    }
    if (from.has_config()) {
      mutable_config()->::snakes::GameConfig::MergeFrom(from.config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->snakes())) return false;
  if (has_players()) {
    if (!this->players_->IsInitialized()) return false;
  }
  return true;
}

void GameState::Swap(GameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState::InternalSwap(GameState* other) {
  std::swap(state_order_, other->state_order_);
  snakes_.UnsafeArenaSwap(&other->snakes_);
  foods_.UnsafeArenaSwap(&other->foods_);
  std::swap(players_, other->players_);
  std::swap(config_, other->config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameState_descriptor_;
  metadata.reflection = GameState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameState_Coord

// optional sint32 x = 1 [default = 0];
bool GameState_Coord::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameState_Coord::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void GameState_Coord::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameState_Coord::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 GameState_Coord::x() const {
  // @@protoc_insertion_point(field_get:snakes.GameState.Coord.x)
  return x_;
}
 void GameState_Coord::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameState.Coord.x)
}

// optional sint32 y = 2 [default = 0];
bool GameState_Coord::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameState_Coord::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void GameState_Coord::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameState_Coord::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 GameState_Coord::y() const {
  // @@protoc_insertion_point(field_get:snakes.GameState.Coord.y)
  return y_;
}
 void GameState_Coord::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameState.Coord.y)
}

// -------------------------------------------------------------------

// GameState_Snake

// required int32 player_id = 1;
bool GameState_Snake::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameState_Snake::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GameState_Snake::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameState_Snake::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
 ::google::protobuf::int32 GameState_Snake::player_id() const {
  // @@protoc_insertion_point(field_get:snakes.GameState.Snake.player_id)
  return player_id_;
}
 void GameState_Snake::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameState.Snake.player_id)
}

// repeated .snakes.GameState.Coord points = 2;
int GameState_Snake::points_size() const {
  return points_.size();
}
void GameState_Snake::clear_points() {
  points_.Clear();
}
const ::snakes::GameState_Coord& GameState_Snake::points(int index) const {
  // @@protoc_insertion_point(field_get:snakes.GameState.Snake.points)
  return points_.Get(index);
}
::snakes::GameState_Coord* GameState_Snake::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:snakes.GameState.Snake.points)
  return points_.Mutable(index);
}
::snakes::GameState_Coord* GameState_Snake::add_points() {
  // @@protoc_insertion_point(field_add:snakes.GameState.Snake.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::snakes::GameState_Coord >*
GameState_Snake::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:snakes.GameState.Snake.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::snakes::GameState_Coord >&
GameState_Snake::points() const {
  // @@protoc_insertion_point(field_list:snakes.GameState.Snake.points)
  return points_;
}

// required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
bool GameState_Snake::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameState_Snake::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void GameState_Snake::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameState_Snake::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::snakes::GameState_Snake_SnakeState GameState_Snake::state() const {
  // @@protoc_insertion_point(field_get:snakes.GameState.Snake.state)
  return static_cast< ::snakes::GameState_Snake_SnakeState >(state_);
}
 void GameState_Snake::set_state(::snakes::GameState_Snake_SnakeState value) {
  assert(::snakes::GameState_Snake_SnakeState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameState.Snake.state)
}

// required .snakes.Direction head_direction = 4;
bool GameState_Snake::has_head_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameState_Snake::set_has_head_direction() {
  _has_bits_[0] |= 0x00000008u;
}
void GameState_Snake::clear_has_head_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameState_Snake::clear_head_direction() {
  head_direction_ = 1;
  clear_has_head_direction();
}
 ::snakes::Direction GameState_Snake::head_direction() const {
  // @@protoc_insertion_point(field_get:snakes.GameState.Snake.head_direction)
  return static_cast< ::snakes::Direction >(head_direction_);
}
 void GameState_Snake::set_head_direction(::snakes::Direction value) {
  assert(::snakes::Direction_IsValid(value));
  set_has_head_direction();
  head_direction_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameState.Snake.head_direction)
}

// -------------------------------------------------------------------

// GameState

// required int32 state_order = 1;
bool GameState::has_state_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameState::set_has_state_order() {
  _has_bits_[0] |= 0x00000001u;
}
void GameState::clear_has_state_order() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameState::clear_state_order() {
  state_order_ = 0;
  clear_has_state_order();
}
 ::google::protobuf::int32 GameState::state_order() const {
  // @@protoc_insertion_point(field_get:snakes.GameState.state_order)
  return state_order_;
}
 void GameState::set_state_order(::google::protobuf::int32 value) {
  set_has_state_order();
  state_order_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameState.state_order)
}

// repeated .snakes.GameState.Snake snakes = 2;
int GameState::snakes_size() const {
  return snakes_.size();
}
void GameState::clear_snakes() {
  snakes_.Clear();
}
const ::snakes::GameState_Snake& GameState::snakes(int index) const {
  // @@protoc_insertion_point(field_get:snakes.GameState.snakes)
  return snakes_.Get(index);
}
::snakes::GameState_Snake* GameState::mutable_snakes(int index) {
  // @@protoc_insertion_point(field_mutable:snakes.GameState.snakes)
  return snakes_.Mutable(index);
}
::snakes::GameState_Snake* GameState::add_snakes() {
  // @@protoc_insertion_point(field_add:snakes.GameState.snakes)
  return snakes_.Add();
}
::google::protobuf::RepeatedPtrField< ::snakes::GameState_Snake >*
GameState::mutable_snakes() {
  // @@protoc_insertion_point(field_mutable_list:snakes.GameState.snakes)
  return &snakes_;
}
const ::google::protobuf::RepeatedPtrField< ::snakes::GameState_Snake >&
GameState::snakes() const {
  // @@protoc_insertion_point(field_list:snakes.GameState.snakes)
  return snakes_;
}

// repeated .snakes.GameState.Coord foods = 3;
int GameState::foods_size() const {
  return foods_.size();
}
void GameState::clear_foods() {
  foods_.Clear();
}
const ::snakes::GameState_Coord& GameState::foods(int index) const {
  // @@protoc_insertion_point(field_get:snakes.GameState.foods)
  return foods_.Get(index);
}
::snakes::GameState_Coord* GameState::mutable_foods(int index) {
  // @@protoc_insertion_point(field_mutable:snakes.GameState.foods)
  return foods_.Mutable(index);
}
::snakes::GameState_Coord* GameState::add_foods() {
  // @@protoc_insertion_point(field_add:snakes.GameState.foods)
  return foods_.Add();
}
::google::protobuf::RepeatedPtrField< ::snakes::GameState_Coord >*
GameState::mutable_foods() {
  // @@protoc_insertion_point(field_mutable_list:snakes.GameState.foods)
  return &foods_;
}
const ::google::protobuf::RepeatedPtrField< ::snakes::GameState_Coord >&
GameState::foods() const {
  // @@protoc_insertion_point(field_list:snakes.GameState.foods)
  return foods_;
}

// required .snakes.GamePlayers players = 4;
bool GameState::has_players() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameState::set_has_players() {
  _has_bits_[0] |= 0x00000008u;
}
void GameState::clear_has_players() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameState::clear_players() {
  if (players_ != NULL) players_->::snakes::GamePlayers::Clear();
  clear_has_players();
}
const ::snakes::GamePlayers& GameState::players() const {
  // @@protoc_insertion_point(field_get:snakes.GameState.players)
  return players_ != NULL ? *players_ : *default_instance_->players_;
}
::snakes::GamePlayers* GameState::mutable_players() {
  set_has_players();
  if (players_ == NULL) {
    players_ = new ::snakes::GamePlayers;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameState.players)
  return players_;
}
::snakes::GamePlayers* GameState::release_players() {
  // @@protoc_insertion_point(field_release:snakes.GameState.players)
  clear_has_players();
  ::snakes::GamePlayers* temp = players_;
  players_ = NULL;
  return temp;
}
void GameState::set_allocated_players(::snakes::GamePlayers* players) {
  delete players_;
  players_ = players;
  if (players) {
    set_has_players();
  } else {
    clear_has_players();
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameState.players)
}

// required .snakes.GameConfig config = 5;
bool GameState::has_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameState::set_has_config() {
  _has_bits_[0] |= 0x00000010u;
}
void GameState::clear_has_config() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameState::clear_config() {
  if (config_ != NULL) config_->::snakes::GameConfig::Clear();
  clear_has_config();
}
const ::snakes::GameConfig& GameState::config() const {
  // @@protoc_insertion_point(field_get:snakes.GameState.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::snakes::GameConfig* GameState::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::snakes::GameConfig;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameState.config)
  return config_;
}
::snakes::GameConfig* GameState::release_config() {
  // @@protoc_insertion_point(field_release:snakes.GameState.config)
  clear_has_config();
  ::snakes::GameConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void GameState::set_allocated_config(::snakes::GameConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameState.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage_PingMsg::GameMessage_PingMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameMessage.PingMsg)
}

void GameMessage_PingMsg::InitAsDefaultInstance() {
}

GameMessage_PingMsg::GameMessage_PingMsg(const GameMessage_PingMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.PingMsg)
}

void GameMessage_PingMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_PingMsg::~GameMessage_PingMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.PingMsg)
  SharedDtor();
}

void GameMessage_PingMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameMessage_PingMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_PingMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_PingMsg_descriptor_;
}

const GameMessage_PingMsg& GameMessage_PingMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameMessage_PingMsg* GameMessage_PingMsg::default_instance_ = NULL;

GameMessage_PingMsg* GameMessage_PingMsg::New(::google::protobuf::Arena* arena) const {
  GameMessage_PingMsg* n = new GameMessage_PingMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage_PingMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.PingMsg)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMessage_PingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameMessage.PingMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameMessage.PingMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameMessage.PingMsg)
  return false;
#undef DO_
}

void GameMessage_PingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameMessage.PingMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameMessage.PingMsg)
}

::google::protobuf::uint8* GameMessage_PingMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.PingMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.PingMsg)
  return target;
}

int GameMessage_PingMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.PingMsg)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_PingMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.PingMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage_PingMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage_PingMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.PingMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.PingMsg)
    MergeFrom(*source);
  }
}

void GameMessage_PingMsg::MergeFrom(const GameMessage_PingMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.PingMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMessage_PingMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.PingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_PingMsg::CopyFrom(const GameMessage_PingMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.PingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_PingMsg::IsInitialized() const {

  return true;
}

void GameMessage_PingMsg::Swap(GameMessage_PingMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage_PingMsg::InternalSwap(GameMessage_PingMsg* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage_PingMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_PingMsg_descriptor_;
  metadata.reflection = GameMessage_PingMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMessage_SteerMsg::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage_SteerMsg::GameMessage_SteerMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameMessage.SteerMsg)
}

void GameMessage_SteerMsg::InitAsDefaultInstance() {
}

GameMessage_SteerMsg::GameMessage_SteerMsg(const GameMessage_SteerMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.SteerMsg)
}

void GameMessage_SteerMsg::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_SteerMsg::~GameMessage_SteerMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.SteerMsg)
  SharedDtor();
}

void GameMessage_SteerMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameMessage_SteerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_SteerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_SteerMsg_descriptor_;
}

const GameMessage_SteerMsg& GameMessage_SteerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameMessage_SteerMsg* GameMessage_SteerMsg::default_instance_ = NULL;

GameMessage_SteerMsg* GameMessage_SteerMsg::New(::google::protobuf::Arena* arena) const {
  GameMessage_SteerMsg* n = new GameMessage_SteerMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage_SteerMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.SteerMsg)
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMessage_SteerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameMessage.SteerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .snakes.Direction direction = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snakes::Direction_IsValid(value)) {
            set_direction(static_cast< ::snakes::Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameMessage.SteerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameMessage.SteerMsg)
  return false;
#undef DO_
}

void GameMessage_SteerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameMessage.SteerMsg)
  // required .snakes.Direction direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameMessage.SteerMsg)
}

::google::protobuf::uint8* GameMessage_SteerMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.SteerMsg)
  // required .snakes.Direction direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.SteerMsg)
  return target;
}

int GameMessage_SteerMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.SteerMsg)
  int total_size = 0;

  // required .snakes.Direction direction = 1;
  if (has_direction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_SteerMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.SteerMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage_SteerMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage_SteerMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.SteerMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.SteerMsg)
    MergeFrom(*source);
  }
}

void GameMessage_SteerMsg::MergeFrom(const GameMessage_SteerMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.SteerMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMessage_SteerMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.SteerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_SteerMsg::CopyFrom(const GameMessage_SteerMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.SteerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_SteerMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameMessage_SteerMsg::Swap(GameMessage_SteerMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage_SteerMsg::InternalSwap(GameMessage_SteerMsg* other) {
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage_SteerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_SteerMsg_descriptor_;
  metadata.reflection = GameMessage_SteerMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage_AckMsg::GameMessage_AckMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameMessage.AckMsg)
}

void GameMessage_AckMsg::InitAsDefaultInstance() {
}

GameMessage_AckMsg::GameMessage_AckMsg(const GameMessage_AckMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.AckMsg)
}

void GameMessage_AckMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_AckMsg::~GameMessage_AckMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.AckMsg)
  SharedDtor();
}

void GameMessage_AckMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameMessage_AckMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_AckMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_AckMsg_descriptor_;
}

const GameMessage_AckMsg& GameMessage_AckMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameMessage_AckMsg* GameMessage_AckMsg::default_instance_ = NULL;

GameMessage_AckMsg* GameMessage_AckMsg::New(::google::protobuf::Arena* arena) const {
  GameMessage_AckMsg* n = new GameMessage_AckMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage_AckMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.AckMsg)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMessage_AckMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameMessage.AckMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameMessage.AckMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameMessage.AckMsg)
  return false;
#undef DO_
}

void GameMessage_AckMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameMessage.AckMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameMessage.AckMsg)
}

::google::protobuf::uint8* GameMessage_AckMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.AckMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.AckMsg)
  return target;
}

int GameMessage_AckMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.AckMsg)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_AckMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.AckMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage_AckMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage_AckMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.AckMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.AckMsg)
    MergeFrom(*source);
  }
}

void GameMessage_AckMsg::MergeFrom(const GameMessage_AckMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.AckMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMessage_AckMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.AckMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_AckMsg::CopyFrom(const GameMessage_AckMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.AckMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_AckMsg::IsInitialized() const {

  return true;
}

void GameMessage_AckMsg::Swap(GameMessage_AckMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage_AckMsg::InternalSwap(GameMessage_AckMsg* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage_AckMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_AckMsg_descriptor_;
  metadata.reflection = GameMessage_AckMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMessage_StateMsg::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage_StateMsg::GameMessage_StateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameMessage.StateMsg)
}

void GameMessage_StateMsg::InitAsDefaultInstance() {
  state_ = const_cast< ::snakes::GameState*>(&::snakes::GameState::default_instance());
}

GameMessage_StateMsg::GameMessage_StateMsg(const GameMessage_StateMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.StateMsg)
}

void GameMessage_StateMsg::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_StateMsg::~GameMessage_StateMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.StateMsg)
  SharedDtor();
}

void GameMessage_StateMsg::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void GameMessage_StateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_StateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_StateMsg_descriptor_;
}

const GameMessage_StateMsg& GameMessage_StateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameMessage_StateMsg* GameMessage_StateMsg::default_instance_ = NULL;

GameMessage_StateMsg* GameMessage_StateMsg::New(::google::protobuf::Arena* arena) const {
  GameMessage_StateMsg* n = new GameMessage_StateMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage_StateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.StateMsg)
  if (has_state()) {
    if (state_ != NULL) state_->::snakes::GameState::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMessage_StateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameMessage.StateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .snakes.GameState state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameMessage.StateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameMessage.StateMsg)
  return false;
#undef DO_
}

void GameMessage_StateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameMessage.StateMsg)
  // required .snakes.GameState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameMessage.StateMsg)
}

::google::protobuf::uint8* GameMessage_StateMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.StateMsg)
  // required .snakes.GameState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->state_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.StateMsg)
  return target;
}

int GameMessage_StateMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.StateMsg)
  int total_size = 0;

  // required .snakes.GameState state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_StateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.StateMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage_StateMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage_StateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.StateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.StateMsg)
    MergeFrom(*source);
  }
}

void GameMessage_StateMsg::MergeFrom(const GameMessage_StateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.StateMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::snakes::GameState::MergeFrom(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMessage_StateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.StateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_StateMsg::CopyFrom(const GameMessage_StateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.StateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_StateMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  return true;
}

void GameMessage_StateMsg::Swap(GameMessage_StateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage_StateMsg::InternalSwap(GameMessage_StateMsg* other) {
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage_StateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_StateMsg_descriptor_;
  metadata.reflection = GameMessage_StateMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMessage_AnnouncementMsg::kPlayersFieldNumber;
const int GameMessage_AnnouncementMsg::kConfigFieldNumber;
const int GameMessage_AnnouncementMsg::kCanJoinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage_AnnouncementMsg::GameMessage_AnnouncementMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameMessage.AnnouncementMsg)
}

void GameMessage_AnnouncementMsg::InitAsDefaultInstance() {
  players_ = const_cast< ::snakes::GamePlayers*>(&::snakes::GamePlayers::default_instance());
  config_ = const_cast< ::snakes::GameConfig*>(&::snakes::GameConfig::default_instance());
}

GameMessage_AnnouncementMsg::GameMessage_AnnouncementMsg(const GameMessage_AnnouncementMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.AnnouncementMsg)
}

void GameMessage_AnnouncementMsg::SharedCtor() {
  _cached_size_ = 0;
  players_ = NULL;
  config_ = NULL;
  can_join_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_AnnouncementMsg::~GameMessage_AnnouncementMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.AnnouncementMsg)
  SharedDtor();
}

void GameMessage_AnnouncementMsg::SharedDtor() {
  if (this != default_instance_) {
    delete players_;
    delete config_;
  }
}

void GameMessage_AnnouncementMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_AnnouncementMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_AnnouncementMsg_descriptor_;
}

const GameMessage_AnnouncementMsg& GameMessage_AnnouncementMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameMessage_AnnouncementMsg* GameMessage_AnnouncementMsg::default_instance_ = NULL;

GameMessage_AnnouncementMsg* GameMessage_AnnouncementMsg::New(::google::protobuf::Arena* arena) const {
  GameMessage_AnnouncementMsg* n = new GameMessage_AnnouncementMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage_AnnouncementMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.AnnouncementMsg)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_players()) {
      if (players_ != NULL) players_->::snakes::GamePlayers::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::snakes::GameConfig::Clear();
    }
    can_join_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMessage_AnnouncementMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameMessage.AnnouncementMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .snakes.GamePlayers players = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // required .snakes.GameConfig config = 2;
      case 2: {
        if (tag == 18) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_can_join;
        break;
      }

      // optional bool can_join = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_can_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_join_)));
          set_has_can_join();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameMessage.AnnouncementMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameMessage.AnnouncementMsg)
  return false;
#undef DO_
}

void GameMessage_AnnouncementMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameMessage.AnnouncementMsg)
  // required .snakes.GamePlayers players = 1;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->players_, output);
  }

  // required .snakes.GameConfig config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // optional bool can_join = 3 [default = true];
  if (has_can_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_join(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameMessage.AnnouncementMsg)
}

::google::protobuf::uint8* GameMessage_AnnouncementMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.AnnouncementMsg)
  // required .snakes.GamePlayers players = 1;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->players_, false, target);
  }

  // required .snakes.GameConfig config = 2;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, false, target);
  }

  // optional bool can_join = 3 [default = true];
  if (has_can_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_join(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.AnnouncementMsg)
  return target;
}

int GameMessage_AnnouncementMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snakes.GameMessage.AnnouncementMsg)
  int total_size = 0;

  if (has_players()) {
    // required .snakes.GamePlayers players = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->players_);
  }

  if (has_config()) {
    // required .snakes.GameConfig config = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  return total_size;
}
int GameMessage_AnnouncementMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.AnnouncementMsg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .snakes.GamePlayers players = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->players_);

    // required .snakes.GameConfig config = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool can_join = 3 [default = true];
  if (has_can_join()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_AnnouncementMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.AnnouncementMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage_AnnouncementMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage_AnnouncementMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.AnnouncementMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.AnnouncementMsg)
    MergeFrom(*source);
  }
}

void GameMessage_AnnouncementMsg::MergeFrom(const GameMessage_AnnouncementMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.AnnouncementMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_players()) {
      mutable_players()->::snakes::GamePlayers::MergeFrom(from.players());
    }
    if (from.has_config()) {
      mutable_config()->::snakes::GameConfig::MergeFrom(from.config());
    }
    if (from.has_can_join()) {
      set_can_join(from.can_join());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMessage_AnnouncementMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.AnnouncementMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_AnnouncementMsg::CopyFrom(const GameMessage_AnnouncementMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.AnnouncementMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_AnnouncementMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_players()) {
    if (!this->players_->IsInitialized()) return false;
  }
  return true;
}

void GameMessage_AnnouncementMsg::Swap(GameMessage_AnnouncementMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage_AnnouncementMsg::InternalSwap(GameMessage_AnnouncementMsg* other) {
  std::swap(players_, other->players_);
  std::swap(config_, other->config_);
  std::swap(can_join_, other->can_join_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage_AnnouncementMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_AnnouncementMsg_descriptor_;
  metadata.reflection = GameMessage_AnnouncementMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMessage_JoinMsg::kPlayerTypeFieldNumber;
const int GameMessage_JoinMsg::kOnlyViewFieldNumber;
const int GameMessage_JoinMsg::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage_JoinMsg::GameMessage_JoinMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameMessage.JoinMsg)
}

void GameMessage_JoinMsg::InitAsDefaultInstance() {
}

GameMessage_JoinMsg::GameMessage_JoinMsg(const GameMessage_JoinMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.JoinMsg)
}

void GameMessage_JoinMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_type_ = 0;
  only_view_ = false;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_JoinMsg::~GameMessage_JoinMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.JoinMsg)
  SharedDtor();
}

void GameMessage_JoinMsg::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GameMessage_JoinMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_JoinMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_JoinMsg_descriptor_;
}

const GameMessage_JoinMsg& GameMessage_JoinMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameMessage_JoinMsg* GameMessage_JoinMsg::default_instance_ = NULL;

GameMessage_JoinMsg* GameMessage_JoinMsg::New(::google::protobuf::Arena* arena) const {
  GameMessage_JoinMsg* n = new GameMessage_JoinMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage_JoinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.JoinMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameMessage_JoinMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameMessage_JoinMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(player_type_, only_view_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMessage_JoinMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameMessage.JoinMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .snakes.PlayerType player_type = 1 [default = HUMAN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snakes::PlayerType_IsValid(value)) {
            set_player_type(static_cast< ::snakes::PlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_only_view;
        break;
      }

      // optional bool only_view = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_only_view:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_view_)));
          set_has_only_view();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "snakes.GameMessage.JoinMsg.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameMessage.JoinMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameMessage.JoinMsg)
  return false;
#undef DO_
}

void GameMessage_JoinMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameMessage.JoinMsg)
  // optional .snakes.PlayerType player_type = 1 [default = HUMAN];
  if (has_player_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->player_type(), output);
  }

  // optional bool only_view = 2 [default = false];
  if (has_only_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->only_view(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snakes.GameMessage.JoinMsg.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameMessage.JoinMsg)
}

::google::protobuf::uint8* GameMessage_JoinMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.JoinMsg)
  // optional .snakes.PlayerType player_type = 1 [default = HUMAN];
  if (has_player_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->player_type(), target);
  }

  // optional bool only_view = 2 [default = false];
  if (has_only_view()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->only_view(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snakes.GameMessage.JoinMsg.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.JoinMsg)
  return target;
}

int GameMessage_JoinMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.JoinMsg)
  int total_size = 0;

  // required string name = 3;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .snakes.PlayerType player_type = 1 [default = HUMAN];
    if (has_player_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->player_type());
    }

    // optional bool only_view = 2 [default = false];
    if (has_only_view()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_JoinMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.JoinMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage_JoinMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage_JoinMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.JoinMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.JoinMsg)
    MergeFrom(*source);
  }
}

void GameMessage_JoinMsg::MergeFrom(const GameMessage_JoinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.JoinMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_type()) {
      set_player_type(from.player_type());
    }
    if (from.has_only_view()) {
      set_only_view(from.only_view());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMessage_JoinMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.JoinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_JoinMsg::CopyFrom(const GameMessage_JoinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.JoinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_JoinMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GameMessage_JoinMsg::Swap(GameMessage_JoinMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage_JoinMsg::InternalSwap(GameMessage_JoinMsg* other) {
  std::swap(player_type_, other->player_type_);
  std::swap(only_view_, other->only_view_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage_JoinMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_JoinMsg_descriptor_;
  metadata.reflection = GameMessage_JoinMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMessage_ErrorMsg::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage_ErrorMsg::GameMessage_ErrorMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameMessage.ErrorMsg)
}

void GameMessage_ErrorMsg::InitAsDefaultInstance() {
}

GameMessage_ErrorMsg::GameMessage_ErrorMsg(const GameMessage_ErrorMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.ErrorMsg)
}

void GameMessage_ErrorMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_ErrorMsg::~GameMessage_ErrorMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.ErrorMsg)
  SharedDtor();
}

void GameMessage_ErrorMsg::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GameMessage_ErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_ErrorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_ErrorMsg_descriptor_;
}

const GameMessage_ErrorMsg& GameMessage_ErrorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameMessage_ErrorMsg* GameMessage_ErrorMsg::default_instance_ = NULL;

GameMessage_ErrorMsg* GameMessage_ErrorMsg::New(::google::protobuf::Arena* arena) const {
  GameMessage_ErrorMsg* n = new GameMessage_ErrorMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage_ErrorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.ErrorMsg)
  if (has_error_message()) {
    error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMessage_ErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameMessage.ErrorMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string error_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "snakes.GameMessage.ErrorMsg.error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameMessage.ErrorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameMessage.ErrorMsg)
  return false;
#undef DO_
}

void GameMessage_ErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameMessage.ErrorMsg)
  // required string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snakes.GameMessage.ErrorMsg.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameMessage.ErrorMsg)
}

::google::protobuf::uint8* GameMessage_ErrorMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.ErrorMsg)
  // required string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snakes.GameMessage.ErrorMsg.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.ErrorMsg)
  return target;
}

int GameMessage_ErrorMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.ErrorMsg)
  int total_size = 0;

  // required string error_message = 1;
  if (has_error_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_ErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.ErrorMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage_ErrorMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage_ErrorMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.ErrorMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.ErrorMsg)
    MergeFrom(*source);
  }
}

void GameMessage_ErrorMsg::MergeFrom(const GameMessage_ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.ErrorMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_message()) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMessage_ErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_ErrorMsg::CopyFrom(const GameMessage_ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_ErrorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameMessage_ErrorMsg::Swap(GameMessage_ErrorMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage_ErrorMsg::InternalSwap(GameMessage_ErrorMsg* other) {
  error_message_.Swap(&other->error_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage_ErrorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_ErrorMsg_descriptor_;
  metadata.reflection = GameMessage_ErrorMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMessage_RoleChangeMsg::kSenderRoleFieldNumber;
const int GameMessage_RoleChangeMsg::kReceiverRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage_RoleChangeMsg::GameMessage_RoleChangeMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameMessage.RoleChangeMsg)
}

void GameMessage_RoleChangeMsg::InitAsDefaultInstance() {
}

GameMessage_RoleChangeMsg::GameMessage_RoleChangeMsg(const GameMessage_RoleChangeMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.RoleChangeMsg)
}

void GameMessage_RoleChangeMsg::SharedCtor() {
  _cached_size_ = 0;
  sender_role_ = 0;
  receiver_role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_RoleChangeMsg::~GameMessage_RoleChangeMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.RoleChangeMsg)
  SharedDtor();
}

void GameMessage_RoleChangeMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameMessage_RoleChangeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_RoleChangeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_RoleChangeMsg_descriptor_;
}

const GameMessage_RoleChangeMsg& GameMessage_RoleChangeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameMessage_RoleChangeMsg* GameMessage_RoleChangeMsg::default_instance_ = NULL;

GameMessage_RoleChangeMsg* GameMessage_RoleChangeMsg::New(::google::protobuf::Arena* arena) const {
  GameMessage_RoleChangeMsg* n = new GameMessage_RoleChangeMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage_RoleChangeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.RoleChangeMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameMessage_RoleChangeMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameMessage_RoleChangeMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sender_role_, receiver_role_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMessage_RoleChangeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameMessage.RoleChangeMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .snakes.NodeRole sender_role = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snakes::NodeRole_IsValid(value)) {
            set_sender_role(static_cast< ::snakes::NodeRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_receiver_role;
        break;
      }

      // optional .snakes.NodeRole receiver_role = 2;
      case 2: {
        if (tag == 16) {
         parse_receiver_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snakes::NodeRole_IsValid(value)) {
            set_receiver_role(static_cast< ::snakes::NodeRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameMessage.RoleChangeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameMessage.RoleChangeMsg)
  return false;
#undef DO_
}

void GameMessage_RoleChangeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameMessage.RoleChangeMsg)
  // optional .snakes.NodeRole sender_role = 1;
  if (has_sender_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sender_role(), output);
  }

  // optional .snakes.NodeRole receiver_role = 2;
  if (has_receiver_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->receiver_role(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameMessage.RoleChangeMsg)
}

::google::protobuf::uint8* GameMessage_RoleChangeMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.RoleChangeMsg)
  // optional .snakes.NodeRole sender_role = 1;
  if (has_sender_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sender_role(), target);
  }

  // optional .snakes.NodeRole receiver_role = 2;
  if (has_receiver_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->receiver_role(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.RoleChangeMsg)
  return target;
}

int GameMessage_RoleChangeMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.RoleChangeMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .snakes.NodeRole sender_role = 1;
    if (has_sender_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sender_role());
    }

    // optional .snakes.NodeRole receiver_role = 2;
    if (has_receiver_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->receiver_role());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_RoleChangeMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.RoleChangeMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage_RoleChangeMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage_RoleChangeMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.RoleChangeMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.RoleChangeMsg)
    MergeFrom(*source);
  }
}

void GameMessage_RoleChangeMsg::MergeFrom(const GameMessage_RoleChangeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.RoleChangeMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_role()) {
      set_sender_role(from.sender_role());
    }
    if (from.has_receiver_role()) {
      set_receiver_role(from.receiver_role());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMessage_RoleChangeMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.RoleChangeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_RoleChangeMsg::CopyFrom(const GameMessage_RoleChangeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.RoleChangeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_RoleChangeMsg::IsInitialized() const {

  return true;
}

void GameMessage_RoleChangeMsg::Swap(GameMessage_RoleChangeMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage_RoleChangeMsg::InternalSwap(GameMessage_RoleChangeMsg* other) {
  std::swap(sender_role_, other->sender_role_);
  std::swap(receiver_role_, other->receiver_role_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage_RoleChangeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_RoleChangeMsg_descriptor_;
  metadata.reflection = GameMessage_RoleChangeMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMessage::kMsgSeqFieldNumber;
const int GameMessage::kSenderIdFieldNumber;
const int GameMessage::kReceiverIdFieldNumber;
const int GameMessage::kPingFieldNumber;
const int GameMessage::kSteerFieldNumber;
const int GameMessage::kAckFieldNumber;
const int GameMessage::kStateFieldNumber;
const int GameMessage::kAnnouncementFieldNumber;
const int GameMessage::kJoinFieldNumber;
const int GameMessage::kErrorFieldNumber;
const int GameMessage::kRoleChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage::GameMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snakes.GameMessage)
}

void GameMessage::InitAsDefaultInstance() {
  GameMessage_default_oneof_instance_->ping_ = const_cast< ::snakes::GameMessage_PingMsg*>(&::snakes::GameMessage_PingMsg::default_instance());
  GameMessage_default_oneof_instance_->steer_ = const_cast< ::snakes::GameMessage_SteerMsg*>(&::snakes::GameMessage_SteerMsg::default_instance());
  GameMessage_default_oneof_instance_->ack_ = const_cast< ::snakes::GameMessage_AckMsg*>(&::snakes::GameMessage_AckMsg::default_instance());
  GameMessage_default_oneof_instance_->state_ = const_cast< ::snakes::GameMessage_StateMsg*>(&::snakes::GameMessage_StateMsg::default_instance());
  GameMessage_default_oneof_instance_->announcement_ = const_cast< ::snakes::GameMessage_AnnouncementMsg*>(&::snakes::GameMessage_AnnouncementMsg::default_instance());
  GameMessage_default_oneof_instance_->join_ = const_cast< ::snakes::GameMessage_JoinMsg*>(&::snakes::GameMessage_JoinMsg::default_instance());
  GameMessage_default_oneof_instance_->error_ = const_cast< ::snakes::GameMessage_ErrorMsg*>(&::snakes::GameMessage_ErrorMsg::default_instance());
  GameMessage_default_oneof_instance_->role_change_ = const_cast< ::snakes::GameMessage_RoleChangeMsg*>(&::snakes::GameMessage_RoleChangeMsg::default_instance());
}

GameMessage::GameMessage(const GameMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage)
}

void GameMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_seq_ = GOOGLE_LONGLONG(0);
  sender_id_ = 0;
  receiver_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Type();
}

GameMessage::~GameMessage() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage)
  SharedDtor();
}

void GameMessage::SharedDtor() {
  if (has_Type()) {
    clear_Type();
  }
  if (this != default_instance_) {
  }
}

void GameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_descriptor_;
}

const GameMessage& GameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakes_2eproto();
  return *default_instance_;
}

GameMessage* GameMessage::default_instance_ = NULL;

GameMessage* GameMessage::New(::google::protobuf::Arena* arena) const {
  GameMessage* n = new GameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:snakes.GameMessage)
  switch(Type_case()) {
    case kPing: {
      delete Type_.ping_;
      break;
    }
    case kSteer: {
      delete Type_.steer_;
      break;
    }
    case kAck: {
      delete Type_.ack_;
      break;
    }
    case kState: {
      delete Type_.state_;
      break;
    }
    case kAnnouncement: {
      delete Type_.announcement_;
      break;
    }
    case kJoin: {
      delete Type_.join_;
      break;
    }
    case kError: {
      delete Type_.error_;
      break;
    }
    case kRoleChange: {
      delete Type_.role_change_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void GameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msg_seq_, receiver_id_);

#undef ZR_HELPER_
#undef ZR_

  clear_Type();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snakes.GameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 msg_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_)));
          set_has_msg_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ping;
        break;
      }

      // optional .snakes.GameMessage.PingMsg ping = 2;
      case 2: {
        if (tag == 18) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_steer;
        break;
      }

      // optional .snakes.GameMessage.SteerMsg steer = 3;
      case 3: {
        if (tag == 26) {
         parse_steer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ack;
        break;
      }

      // optional .snakes.GameMessage.AckMsg ack = 4;
      case 4: {
        if (tag == 34) {
         parse_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_state;
        break;
      }

      // optional .snakes.GameMessage.StateMsg state = 5;
      case 5: {
        if (tag == 42) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_announcement;
        break;
      }

      // optional .snakes.GameMessage.AnnouncementMsg announcement = 6;
      case 6: {
        if (tag == 50) {
         parse_announcement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_announcement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_join;
        break;
      }

      // optional .snakes.GameMessage.JoinMsg join = 7;
      case 7: {
        if (tag == 58) {
         parse_join:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_error;
        break;
      }

      // optional .snakes.GameMessage.ErrorMsg error = 8;
      case 8: {
        if (tag == 66) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_role_change;
        break;
      }

      // optional .snakes.GameMessage.RoleChangeMsg role_change = 9;
      case 9: {
        if (tag == 74) {
         parse_role_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_change()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sender_id;
        break;
      }

      // optional int32 sender_id = 10;
      case 10: {
        if (tag == 80) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_receiver_id;
        break;
      }

      // optional int32 receiver_id = 11;
      case 11: {
        if (tag == 88) {
         parse_receiver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiver_id_)));
          set_has_receiver_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snakes.GameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snakes.GameMessage)
  return false;
#undef DO_
}

void GameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snakes.GameMessage)
  // required int64 msg_seq = 1;
  if (has_msg_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_seq(), output);
  }

  // optional .snakes.GameMessage.PingMsg ping = 2;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *Type_.ping_, output);
  }

  // optional .snakes.GameMessage.SteerMsg steer = 3;
  if (has_steer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *Type_.steer_, output);
  }

  // optional .snakes.GameMessage.AckMsg ack = 4;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *Type_.ack_, output);
  }

  // optional .snakes.GameMessage.StateMsg state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *Type_.state_, output);
  }

  // optional .snakes.GameMessage.AnnouncementMsg announcement = 6;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *Type_.announcement_, output);
  }

  // optional .snakes.GameMessage.JoinMsg join = 7;
  if (has_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *Type_.join_, output);
  }

  // optional .snakes.GameMessage.ErrorMsg error = 8;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *Type_.error_, output);
  }

  // optional .snakes.GameMessage.RoleChangeMsg role_change = 9;
  if (has_role_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *Type_.role_change_, output);
  }

  // optional int32 sender_id = 10;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sender_id(), output);
  }

  // optional int32 receiver_id = 11;
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->receiver_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snakes.GameMessage)
}

::google::protobuf::uint8* GameMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage)
  // required int64 msg_seq = 1;
  if (has_msg_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msg_seq(), target);
  }

  // optional .snakes.GameMessage.PingMsg ping = 2;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *Type_.ping_, false, target);
  }

  // optional .snakes.GameMessage.SteerMsg steer = 3;
  if (has_steer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *Type_.steer_, false, target);
  }

  // optional .snakes.GameMessage.AckMsg ack = 4;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *Type_.ack_, false, target);
  }

  // optional .snakes.GameMessage.StateMsg state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *Type_.state_, false, target);
  }

  // optional .snakes.GameMessage.AnnouncementMsg announcement = 6;
  if (has_announcement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *Type_.announcement_, false, target);
  }

  // optional .snakes.GameMessage.JoinMsg join = 7;
  if (has_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *Type_.join_, false, target);
  }

  // optional .snakes.GameMessage.ErrorMsg error = 8;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *Type_.error_, false, target);
  }

  // optional .snakes.GameMessage.RoleChangeMsg role_change = 9;
  if (has_role_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *Type_.role_change_, false, target);
  }

  // optional int32 sender_id = 10;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sender_id(), target);
  }

  // optional int32 receiver_id = 11;
  if (has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->receiver_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage)
  return target;
}

int GameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage)
  int total_size = 0;

  // required int64 msg_seq = 1;
  if (has_msg_seq()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->msg_seq());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 sender_id = 10;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_id());
    }

    // optional int32 receiver_id = 11;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiver_id());
    }

  }
  switch (Type_case()) {
    // optional .snakes.GameMessage.PingMsg ping = 2;
    case kPing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.ping_);
      break;
    }
    // optional .snakes.GameMessage.SteerMsg steer = 3;
    case kSteer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.steer_);
      break;
    }
    // optional .snakes.GameMessage.AckMsg ack = 4;
    case kAck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.ack_);
      break;
    }
    // optional .snakes.GameMessage.StateMsg state = 5;
    case kState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.state_);
      break;
    }
    // optional .snakes.GameMessage.AnnouncementMsg announcement = 6;
    case kAnnouncement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.announcement_);
      break;
    }
    // optional .snakes.GameMessage.JoinMsg join = 7;
    case kJoin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.join_);
      break;
    }
    // optional .snakes.GameMessage.ErrorMsg error = 8;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.error_);
      break;
    }
    // optional .snakes.GameMessage.RoleChangeMsg role_change = 9;
    case kRoleChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.role_change_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage)
    MergeFrom(*source);
  }
}

void GameMessage::MergeFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.Type_case()) {
    case kPing: {
      mutable_ping()->::snakes::GameMessage_PingMsg::MergeFrom(from.ping());
      break;
    }
    case kSteer: {
      mutable_steer()->::snakes::GameMessage_SteerMsg::MergeFrom(from.steer());
      break;
    }
    case kAck: {
      mutable_ack()->::snakes::GameMessage_AckMsg::MergeFrom(from.ack());
      break;
    }
    case kState: {
      mutable_state()->::snakes::GameMessage_StateMsg::MergeFrom(from.state());
      break;
    }
    case kAnnouncement: {
      mutable_announcement()->::snakes::GameMessage_AnnouncementMsg::MergeFrom(from.announcement());
      break;
    }
    case kJoin: {
      mutable_join()->::snakes::GameMessage_JoinMsg::MergeFrom(from.join());
      break;
    }
    case kError: {
      mutable_error()->::snakes::GameMessage_ErrorMsg::MergeFrom(from.error());
      break;
    }
    case kRoleChange: {
      mutable_role_change()->::snakes::GameMessage_RoleChangeMsg::MergeFrom(from.role_change());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_seq()) {
      set_msg_seq(from.msg_seq());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage::CopyFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_steer()) {
    if (!this->steer().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_announcement()) {
    if (!this->announcement().IsInitialized()) return false;
  }
  if (has_join()) {
    if (!this->join().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GameMessage::Swap(GameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage::InternalSwap(GameMessage* other) {
  std::swap(msg_seq_, other->msg_seq_);
  std::swap(sender_id_, other->sender_id_);
  std::swap(receiver_id_, other->receiver_id_);
  std::swap(Type_, other->Type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_descriptor_;
  metadata.reflection = GameMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameMessage_PingMsg

// -------------------------------------------------------------------

// GameMessage_SteerMsg

// required .snakes.Direction direction = 1;
bool GameMessage_SteerMsg::has_direction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameMessage_SteerMsg::set_has_direction() {
  _has_bits_[0] |= 0x00000001u;
}
void GameMessage_SteerMsg::clear_has_direction() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameMessage_SteerMsg::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
 ::snakes::Direction GameMessage_SteerMsg::direction() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.SteerMsg.direction)
  return static_cast< ::snakes::Direction >(direction_);
}
 void GameMessage_SteerMsg::set_direction(::snakes::Direction value) {
  assert(::snakes::Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameMessage.SteerMsg.direction)
}

// -------------------------------------------------------------------

// GameMessage_AckMsg

// -------------------------------------------------------------------

// GameMessage_StateMsg

// required .snakes.GameState state = 1;
bool GameMessage_StateMsg::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameMessage_StateMsg::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void GameMessage_StateMsg::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameMessage_StateMsg::clear_state() {
  if (state_ != NULL) state_->::snakes::GameState::Clear();
  clear_has_state();
}
const ::snakes::GameState& GameMessage_StateMsg::state() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.StateMsg.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
::snakes::GameState* GameMessage_StateMsg::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::snakes::GameState;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.StateMsg.state)
  return state_;
}
::snakes::GameState* GameMessage_StateMsg::release_state() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.StateMsg.state)
  clear_has_state();
  ::snakes::GameState* temp = state_;
  state_ = NULL;
  return temp;
}
void GameMessage_StateMsg::set_allocated_state(::snakes::GameState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.StateMsg.state)
}

// -------------------------------------------------------------------

// GameMessage_AnnouncementMsg

// required .snakes.GamePlayers players = 1;
bool GameMessage_AnnouncementMsg::has_players() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameMessage_AnnouncementMsg::set_has_players() {
  _has_bits_[0] |= 0x00000001u;
}
void GameMessage_AnnouncementMsg::clear_has_players() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameMessage_AnnouncementMsg::clear_players() {
  if (players_ != NULL) players_->::snakes::GamePlayers::Clear();
  clear_has_players();
}
const ::snakes::GamePlayers& GameMessage_AnnouncementMsg::players() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.AnnouncementMsg.players)
  return players_ != NULL ? *players_ : *default_instance_->players_;
}
::snakes::GamePlayers* GameMessage_AnnouncementMsg::mutable_players() {
  set_has_players();
  if (players_ == NULL) {
    players_ = new ::snakes::GamePlayers;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.AnnouncementMsg.players)
  return players_;
}
::snakes::GamePlayers* GameMessage_AnnouncementMsg::release_players() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.AnnouncementMsg.players)
  clear_has_players();
  ::snakes::GamePlayers* temp = players_;
  players_ = NULL;
  return temp;
}
void GameMessage_AnnouncementMsg::set_allocated_players(::snakes::GamePlayers* players) {
  delete players_;
  players_ = players;
  if (players) {
    set_has_players();
  } else {
    clear_has_players();
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.AnnouncementMsg.players)
}

// required .snakes.GameConfig config = 2;
bool GameMessage_AnnouncementMsg::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameMessage_AnnouncementMsg::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
void GameMessage_AnnouncementMsg::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameMessage_AnnouncementMsg::clear_config() {
  if (config_ != NULL) config_->::snakes::GameConfig::Clear();
  clear_has_config();
}
const ::snakes::GameConfig& GameMessage_AnnouncementMsg::config() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.AnnouncementMsg.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::snakes::GameConfig* GameMessage_AnnouncementMsg::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::snakes::GameConfig;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.AnnouncementMsg.config)
  return config_;
}
::snakes::GameConfig* GameMessage_AnnouncementMsg::release_config() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.AnnouncementMsg.config)
  clear_has_config();
  ::snakes::GameConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void GameMessage_AnnouncementMsg::set_allocated_config(::snakes::GameConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.AnnouncementMsg.config)
}

// optional bool can_join = 3 [default = true];
bool GameMessage_AnnouncementMsg::has_can_join() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameMessage_AnnouncementMsg::set_has_can_join() {
  _has_bits_[0] |= 0x00000004u;
}
void GameMessage_AnnouncementMsg::clear_has_can_join() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameMessage_AnnouncementMsg::clear_can_join() {
  can_join_ = true;
  clear_has_can_join();
}
 bool GameMessage_AnnouncementMsg::can_join() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.AnnouncementMsg.can_join)
  return can_join_;
}
 void GameMessage_AnnouncementMsg::set_can_join(bool value) {
  set_has_can_join();
  can_join_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameMessage.AnnouncementMsg.can_join)
}

// -------------------------------------------------------------------

// GameMessage_JoinMsg

// optional .snakes.PlayerType player_type = 1 [default = HUMAN];
bool GameMessage_JoinMsg::has_player_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameMessage_JoinMsg::set_has_player_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GameMessage_JoinMsg::clear_has_player_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameMessage_JoinMsg::clear_player_type() {
  player_type_ = 0;
  clear_has_player_type();
}
 ::snakes::PlayerType GameMessage_JoinMsg::player_type() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.JoinMsg.player_type)
  return static_cast< ::snakes::PlayerType >(player_type_);
}
 void GameMessage_JoinMsg::set_player_type(::snakes::PlayerType value) {
  assert(::snakes::PlayerType_IsValid(value));
  set_has_player_type();
  player_type_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameMessage.JoinMsg.player_type)
}

// optional bool only_view = 2 [default = false];
bool GameMessage_JoinMsg::has_only_view() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameMessage_JoinMsg::set_has_only_view() {
  _has_bits_[0] |= 0x00000002u;
}
void GameMessage_JoinMsg::clear_has_only_view() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameMessage_JoinMsg::clear_only_view() {
  only_view_ = false;
  clear_has_only_view();
}
 bool GameMessage_JoinMsg::only_view() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.JoinMsg.only_view)
  return only_view_;
}
 void GameMessage_JoinMsg::set_only_view(bool value) {
  set_has_only_view();
  only_view_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameMessage.JoinMsg.only_view)
}

// required string name = 3;
bool GameMessage_JoinMsg::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameMessage_JoinMsg::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void GameMessage_JoinMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameMessage_JoinMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& GameMessage_JoinMsg::name() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.JoinMsg.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameMessage_JoinMsg::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snakes.GameMessage.JoinMsg.name)
}
 void GameMessage_JoinMsg::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snakes.GameMessage.JoinMsg.name)
}
 void GameMessage_JoinMsg::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snakes.GameMessage.JoinMsg.name)
}
 ::std::string* GameMessage_JoinMsg::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.JoinMsg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameMessage_JoinMsg::release_name() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.JoinMsg.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameMessage_JoinMsg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.JoinMsg.name)
}

// -------------------------------------------------------------------

// GameMessage_ErrorMsg

// required string error_message = 1;
bool GameMessage_ErrorMsg::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameMessage_ErrorMsg::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
void GameMessage_ErrorMsg::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameMessage_ErrorMsg::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
 const ::std::string& GameMessage_ErrorMsg::error_message() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.ErrorMsg.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameMessage_ErrorMsg::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snakes.GameMessage.ErrorMsg.error_message)
}
 void GameMessage_ErrorMsg::set_error_message(const char* value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snakes.GameMessage.ErrorMsg.error_message)
}
 void GameMessage_ErrorMsg::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snakes.GameMessage.ErrorMsg.error_message)
}
 ::std::string* GameMessage_ErrorMsg::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.ErrorMsg.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameMessage_ErrorMsg::release_error_message() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.ErrorMsg.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameMessage_ErrorMsg::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.ErrorMsg.error_message)
}

// -------------------------------------------------------------------

// GameMessage_RoleChangeMsg

// optional .snakes.NodeRole sender_role = 1;
bool GameMessage_RoleChangeMsg::has_sender_role() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameMessage_RoleChangeMsg::set_has_sender_role() {
  _has_bits_[0] |= 0x00000001u;
}
void GameMessage_RoleChangeMsg::clear_has_sender_role() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameMessage_RoleChangeMsg::clear_sender_role() {
  sender_role_ = 0;
  clear_has_sender_role();
}
 ::snakes::NodeRole GameMessage_RoleChangeMsg::sender_role() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.RoleChangeMsg.sender_role)
  return static_cast< ::snakes::NodeRole >(sender_role_);
}
 void GameMessage_RoleChangeMsg::set_sender_role(::snakes::NodeRole value) {
  assert(::snakes::NodeRole_IsValid(value));
  set_has_sender_role();
  sender_role_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameMessage.RoleChangeMsg.sender_role)
}

// optional .snakes.NodeRole receiver_role = 2;
bool GameMessage_RoleChangeMsg::has_receiver_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameMessage_RoleChangeMsg::set_has_receiver_role() {
  _has_bits_[0] |= 0x00000002u;
}
void GameMessage_RoleChangeMsg::clear_has_receiver_role() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameMessage_RoleChangeMsg::clear_receiver_role() {
  receiver_role_ = 0;
  clear_has_receiver_role();
}
 ::snakes::NodeRole GameMessage_RoleChangeMsg::receiver_role() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.RoleChangeMsg.receiver_role)
  return static_cast< ::snakes::NodeRole >(receiver_role_);
}
 void GameMessage_RoleChangeMsg::set_receiver_role(::snakes::NodeRole value) {
  assert(::snakes::NodeRole_IsValid(value));
  set_has_receiver_role();
  receiver_role_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameMessage.RoleChangeMsg.receiver_role)
}

// -------------------------------------------------------------------

// GameMessage

// required int64 msg_seq = 1;
bool GameMessage::has_msg_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameMessage::set_has_msg_seq() {
  _has_bits_[0] |= 0x00000001u;
}
void GameMessage::clear_has_msg_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameMessage::clear_msg_seq() {
  msg_seq_ = GOOGLE_LONGLONG(0);
  clear_has_msg_seq();
}
 ::google::protobuf::int64 GameMessage::msg_seq() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.msg_seq)
  return msg_seq_;
}
 void GameMessage::set_msg_seq(::google::protobuf::int64 value) {
  set_has_msg_seq();
  msg_seq_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameMessage.msg_seq)
}

// optional int32 sender_id = 10;
bool GameMessage::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameMessage::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GameMessage::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameMessage::clear_sender_id() {
  sender_id_ = 0;
  clear_has_sender_id();
}
 ::google::protobuf::int32 GameMessage::sender_id() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.sender_id)
  return sender_id_;
}
 void GameMessage::set_sender_id(::google::protobuf::int32 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameMessage.sender_id)
}

// optional int32 receiver_id = 11;
bool GameMessage::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameMessage::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GameMessage::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameMessage::clear_receiver_id() {
  receiver_id_ = 0;
  clear_has_receiver_id();
}
 ::google::protobuf::int32 GameMessage::receiver_id() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.receiver_id)
  return receiver_id_;
}
 void GameMessage::set_receiver_id(::google::protobuf::int32 value) {
  set_has_receiver_id();
  receiver_id_ = value;
  // @@protoc_insertion_point(field_set:snakes.GameMessage.receiver_id)
}

// optional .snakes.GameMessage.PingMsg ping = 2;
bool GameMessage::has_ping() const {
  return Type_case() == kPing;
}
void GameMessage::set_has_ping() {
  _oneof_case_[0] = kPing;
}
void GameMessage::clear_ping() {
  if (has_ping()) {
    delete Type_.ping_;
    clear_has_Type();
  }
}
 const ::snakes::GameMessage_PingMsg& GameMessage::ping() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.ping)
  return has_ping()
      ? *Type_.ping_
      : ::snakes::GameMessage_PingMsg::default_instance();
}
::snakes::GameMessage_PingMsg* GameMessage::mutable_ping() {
  if (!has_ping()) {
    clear_Type();
    set_has_ping();
    Type_.ping_ = new ::snakes::GameMessage_PingMsg;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.ping)
  return Type_.ping_;
}
::snakes::GameMessage_PingMsg* GameMessage::release_ping() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.ping)
  if (has_ping()) {
    clear_has_Type();
    ::snakes::GameMessage_PingMsg* temp = Type_.ping_;
    Type_.ping_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameMessage::set_allocated_ping(::snakes::GameMessage_PingMsg* ping) {
  clear_Type();
  if (ping) {
    set_has_ping();
    Type_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.ping)
}

// optional .snakes.GameMessage.SteerMsg steer = 3;
bool GameMessage::has_steer() const {
  return Type_case() == kSteer;
}
void GameMessage::set_has_steer() {
  _oneof_case_[0] = kSteer;
}
void GameMessage::clear_steer() {
  if (has_steer()) {
    delete Type_.steer_;
    clear_has_Type();
  }
}
 const ::snakes::GameMessage_SteerMsg& GameMessage::steer() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.steer)
  return has_steer()
      ? *Type_.steer_
      : ::snakes::GameMessage_SteerMsg::default_instance();
}
::snakes::GameMessage_SteerMsg* GameMessage::mutable_steer() {
  if (!has_steer()) {
    clear_Type();
    set_has_steer();
    Type_.steer_ = new ::snakes::GameMessage_SteerMsg;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.steer)
  return Type_.steer_;
}
::snakes::GameMessage_SteerMsg* GameMessage::release_steer() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.steer)
  if (has_steer()) {
    clear_has_Type();
    ::snakes::GameMessage_SteerMsg* temp = Type_.steer_;
    Type_.steer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameMessage::set_allocated_steer(::snakes::GameMessage_SteerMsg* steer) {
  clear_Type();
  if (steer) {
    set_has_steer();
    Type_.steer_ = steer;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.steer)
}

// optional .snakes.GameMessage.AckMsg ack = 4;
bool GameMessage::has_ack() const {
  return Type_case() == kAck;
}
void GameMessage::set_has_ack() {
  _oneof_case_[0] = kAck;
}
void GameMessage::clear_ack() {
  if (has_ack()) {
    delete Type_.ack_;
    clear_has_Type();
  }
}
 const ::snakes::GameMessage_AckMsg& GameMessage::ack() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.ack)
  return has_ack()
      ? *Type_.ack_
      : ::snakes::GameMessage_AckMsg::default_instance();
}
::snakes::GameMessage_AckMsg* GameMessage::mutable_ack() {
  if (!has_ack()) {
    clear_Type();
    set_has_ack();
    Type_.ack_ = new ::snakes::GameMessage_AckMsg;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.ack)
  return Type_.ack_;
}
::snakes::GameMessage_AckMsg* GameMessage::release_ack() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.ack)
  if (has_ack()) {
    clear_has_Type();
    ::snakes::GameMessage_AckMsg* temp = Type_.ack_;
    Type_.ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameMessage::set_allocated_ack(::snakes::GameMessage_AckMsg* ack) {
  clear_Type();
  if (ack) {
    set_has_ack();
    Type_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.ack)
}

// optional .snakes.GameMessage.StateMsg state = 5;
bool GameMessage::has_state() const {
  return Type_case() == kState;
}
void GameMessage::set_has_state() {
  _oneof_case_[0] = kState;
}
void GameMessage::clear_state() {
  if (has_state()) {
    delete Type_.state_;
    clear_has_Type();
  }
}
 const ::snakes::GameMessage_StateMsg& GameMessage::state() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.state)
  return has_state()
      ? *Type_.state_
      : ::snakes::GameMessage_StateMsg::default_instance();
}
::snakes::GameMessage_StateMsg* GameMessage::mutable_state() {
  if (!has_state()) {
    clear_Type();
    set_has_state();
    Type_.state_ = new ::snakes::GameMessage_StateMsg;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.state)
  return Type_.state_;
}
::snakes::GameMessage_StateMsg* GameMessage::release_state() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.state)
  if (has_state()) {
    clear_has_Type();
    ::snakes::GameMessage_StateMsg* temp = Type_.state_;
    Type_.state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameMessage::set_allocated_state(::snakes::GameMessage_StateMsg* state) {
  clear_Type();
  if (state) {
    set_has_state();
    Type_.state_ = state;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.state)
}

// optional .snakes.GameMessage.AnnouncementMsg announcement = 6;
bool GameMessage::has_announcement() const {
  return Type_case() == kAnnouncement;
}
void GameMessage::set_has_announcement() {
  _oneof_case_[0] = kAnnouncement;
}
void GameMessage::clear_announcement() {
  if (has_announcement()) {
    delete Type_.announcement_;
    clear_has_Type();
  }
}
 const ::snakes::GameMessage_AnnouncementMsg& GameMessage::announcement() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.announcement)
  return has_announcement()
      ? *Type_.announcement_
      : ::snakes::GameMessage_AnnouncementMsg::default_instance();
}
::snakes::GameMessage_AnnouncementMsg* GameMessage::mutable_announcement() {
  if (!has_announcement()) {
    clear_Type();
    set_has_announcement();
    Type_.announcement_ = new ::snakes::GameMessage_AnnouncementMsg;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.announcement)
  return Type_.announcement_;
}
::snakes::GameMessage_AnnouncementMsg* GameMessage::release_announcement() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.announcement)
  if (has_announcement()) {
    clear_has_Type();
    ::snakes::GameMessage_AnnouncementMsg* temp = Type_.announcement_;
    Type_.announcement_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameMessage::set_allocated_announcement(::snakes::GameMessage_AnnouncementMsg* announcement) {
  clear_Type();
  if (announcement) {
    set_has_announcement();
    Type_.announcement_ = announcement;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.announcement)
}

// optional .snakes.GameMessage.JoinMsg join = 7;
bool GameMessage::has_join() const {
  return Type_case() == kJoin;
}
void GameMessage::set_has_join() {
  _oneof_case_[0] = kJoin;
}
void GameMessage::clear_join() {
  if (has_join()) {
    delete Type_.join_;
    clear_has_Type();
  }
}
 const ::snakes::GameMessage_JoinMsg& GameMessage::join() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.join)
  return has_join()
      ? *Type_.join_
      : ::snakes::GameMessage_JoinMsg::default_instance();
}
::snakes::GameMessage_JoinMsg* GameMessage::mutable_join() {
  if (!has_join()) {
    clear_Type();
    set_has_join();
    Type_.join_ = new ::snakes::GameMessage_JoinMsg;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.join)
  return Type_.join_;
}
::snakes::GameMessage_JoinMsg* GameMessage::release_join() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.join)
  if (has_join()) {
    clear_has_Type();
    ::snakes::GameMessage_JoinMsg* temp = Type_.join_;
    Type_.join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameMessage::set_allocated_join(::snakes::GameMessage_JoinMsg* join) {
  clear_Type();
  if (join) {
    set_has_join();
    Type_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.join)
}

// optional .snakes.GameMessage.ErrorMsg error = 8;
bool GameMessage::has_error() const {
  return Type_case() == kError;
}
void GameMessage::set_has_error() {
  _oneof_case_[0] = kError;
}
void GameMessage::clear_error() {
  if (has_error()) {
    delete Type_.error_;
    clear_has_Type();
  }
}
 const ::snakes::GameMessage_ErrorMsg& GameMessage::error() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.error)
  return has_error()
      ? *Type_.error_
      : ::snakes::GameMessage_ErrorMsg::default_instance();
}
::snakes::GameMessage_ErrorMsg* GameMessage::mutable_error() {
  if (!has_error()) {
    clear_Type();
    set_has_error();
    Type_.error_ = new ::snakes::GameMessage_ErrorMsg;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.error)
  return Type_.error_;
}
::snakes::GameMessage_ErrorMsg* GameMessage::release_error() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.error)
  if (has_error()) {
    clear_has_Type();
    ::snakes::GameMessage_ErrorMsg* temp = Type_.error_;
    Type_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameMessage::set_allocated_error(::snakes::GameMessage_ErrorMsg* error) {
  clear_Type();
  if (error) {
    set_has_error();
    Type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.error)
}

// optional .snakes.GameMessage.RoleChangeMsg role_change = 9;
bool GameMessage::has_role_change() const {
  return Type_case() == kRoleChange;
}
void GameMessage::set_has_role_change() {
  _oneof_case_[0] = kRoleChange;
}
void GameMessage::clear_role_change() {
  if (has_role_change()) {
    delete Type_.role_change_;
    clear_has_Type();
  }
}
 const ::snakes::GameMessage_RoleChangeMsg& GameMessage::role_change() const {
  // @@protoc_insertion_point(field_get:snakes.GameMessage.role_change)
  return has_role_change()
      ? *Type_.role_change_
      : ::snakes::GameMessage_RoleChangeMsg::default_instance();
}
::snakes::GameMessage_RoleChangeMsg* GameMessage::mutable_role_change() {
  if (!has_role_change()) {
    clear_Type();
    set_has_role_change();
    Type_.role_change_ = new ::snakes::GameMessage_RoleChangeMsg;
  }
  // @@protoc_insertion_point(field_mutable:snakes.GameMessage.role_change)
  return Type_.role_change_;
}
::snakes::GameMessage_RoleChangeMsg* GameMessage::release_role_change() {
  // @@protoc_insertion_point(field_release:snakes.GameMessage.role_change)
  if (has_role_change()) {
    clear_has_Type();
    ::snakes::GameMessage_RoleChangeMsg* temp = Type_.role_change_;
    Type_.role_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameMessage::set_allocated_role_change(::snakes::GameMessage_RoleChangeMsg* role_change) {
  clear_Type();
  if (role_change) {
    set_has_role_change();
    Type_.role_change_ = role_change;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.role_change)
}

bool GameMessage::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
void GameMessage::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
GameMessage::TypeCase GameMessage::Type_case() const {
  return GameMessage::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace snakes

// @@protoc_insertion_point(global_scope)
