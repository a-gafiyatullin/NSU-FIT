import runtime;
import string;
import lingo/pegcode/driver;
import math/math;
import ds/set;

export {
    Type ::= Int, Array;
    Int();
    Array(type: Type);

    Expr ::= BinOp, Const, App, Upd, Var;
    BinOp(op: string, le: Expr, re: Expr);
    App(ae: Expr, ie: Expr);
    Upd(ae: Expr, ie: Expr, ve: Expr);
    Const(val: int);
    Var(name: string);

    Prog(decls: [VarDecl], operators: [Oper]);

    Oper ::= CondOper, PrintOper, AssignOper;
    CondOp(op: string, le: Expr, re: Expr);
    CondOper(label: int, cond: CondOp, ll: int, lr: int);
    PrintOper(label: int, e: Expr);
    AssignOper(label: int, var: Var, val: Expr, labels: [UtilityInt]);

    VarDecl(name: string, type: Type);

    UtilityInt(val: int);
}

str2prog(s: string) -> Prog {
    gram = "#include prog.gram";
    parsic(compilePegGrammar(gram), s, defaultPegActions)
}

type2str(t : Type) -> string {
    switch(t) {
        Int() : "int"
        Array(next) : "[" + type2str(next) + "]"
    }
}

expr2str(e : Expr) -> string {
    switch(e) {
        BinOp(op, le, re) : "(" + expr2str(le) + op + expr2str(re) + ")"
        App(ae, ie) : "(" + "app(" + expr2str(ae) + "," + expr2str(ie) + ")" + ")"
        Upd(ae, ie, ve) : "(" + "upd(" + expr2str(ae) + "," + expr2str(ie) + "," + expr2str(ve) + ")" + ")"
        Const(v) : i2s(v)
        Var(name) : name
    }
}

condOp2str(o : CondOp) -> string {
    expr2str(o.le) + o.op + expr2str(o.re)
}

oper2str(o : Oper) -> string {
    switch(o) {
        CondOper(lab, cond, ll, lr) : i2s(lab) + ":" + " if(" + condOp2str(cond) + ") then goto " + i2s(ll) + " else goto " + i2s(lr) + ";"
        PrintOper(lab, e) :  i2s(lab) + ":" + " print(" + expr2str(e) + ");"
        AssignOper(lab, var, val, labels) : i2s(lab) + ": " + expr2str(var) + "=" + expr2str(val) + 
                                            " goto " + fold(map(labels, \v -> i2s(v.val)), "", \v, acc -> acc + "," + v) + ";"
    }
}

printProgStruct(p : Prog) {
    iter(p.decls, \v -> println("var " + v.name + " : " + type2str(v.type)  + ";"));
    iter(p.operators, \v -> println(oper2str(v)));
}

main() {
    s = getFileContent("test.nemo");
	printProgStruct(str2prog(s));
}
